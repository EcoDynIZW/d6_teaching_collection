my.N[index:(MVP.time+1)] <- 0
plot(my.N, col='blue',xlab='Jahre',ylab='Abundanz',cex.lab= 1.5)
lines(my.N,lwd=1)
abline(h=0,col='red')
} else
{
plot(my.N, col='blue',xlab='Jahre',ylab='Abundanz',cex.lab= 1.5)
lines(my.N,lwd=1)
abline(h=0,col='red')}
r <- 0.9
N0 <- 190
K <- 200
T <- 5
MVP.time <- 100
my.N <- c(1:MVP.time+1)
my.N[] <- NA  # zum Abspeichern der aktuellen Anzahl
my.N[1] <- N0 #year 1
for (t in 1 : MVP.time){
if (t == 1) {
Nt <- N0
inc <- r*Nt*(1-(Nt/K))
my.N[t+1] <- Nt + inc
} else
if (t <= T) {
inc <- r*my.N[t]*(1-(my.N[t]/K))
my.N[t+1] <- my.N[t] + inc
} else
if (t > T) {
inc <- r*my.N[t]*(1-(my.N[t-T]/K))
my.N[t+1] <- my.N[t] + inc
}
}
range(my.N)
index <- min(which(my.N <= 0),na.rm=T)
index
if (!is.na(index)){
my.N[index:(MVP.time+1)] <- 0
plot(my.N, col='blue',xlab='Jahre',ylab='Abundanz',cex.lab= 1.5)
lines(my.N,lwd=1)
abline(h=0,col='red')
} else
{
plot(my.N, col='blue',xlab='Jahre',ylab='Abundanz',cex.lab= 1.5)
lines(my.N,lwd=1)
abline(h=0,col='red')}
install.packages(c("animation", "backports", "BH", "bold", "broom", "callr", "checkmate", "clipr", "colorspace", "crul", "curl", "data.table", "dbplyr", "devtools", "dplyr", "e1071", "evaluate", "forcats", "gganimate", "ggthemes", "git2r", "haven", "Hmisc", "htmlTable", "httpuv", "httr", "igraph", "jsonlite", "knitr", "later", "lme4", "maptools", "markdown", "modelr", "natserv", "openssl", "packrat", "pkgload", "processx", "ps", "purrr", "quantreg", "R6", "rcmdcheck", "RcppArmadillo", "RcppEigen", "readr", "readxl", "remotes", "rgdal", "rgeos", "rio", "ritis", "rlang", "rmarkdown", "rotl", "rpostgis", "rstudioapi", "secr", "sessioninfo", "sf", "solrium", "spam", "spData", "stringi", "stringr", "taxize", "TH.data", "tibble", "tinytex", "unmarked", "urltools", "vdiffr", "worrms", "XML"))
library(sp)
library(dismo)
library(raster)
library(GISTools)
library(rgdal)
library(maptools)
library(rgeos)
library(rgl)
library(rasterVis)
library(rgdal)
library(adehabitatHR)
library(maptools)
library(sp)
library(move)
library(plotly)
library(circular)
library(sf)
library(dplyr)
library(tmap)
library(viridis) # my favourite colour palette
library(sp)
library(dismo)
library(raster)
library(GISTools)
library(rgdal)
library(maptools)
library(rgeos)
library(rgl)
library(rasterVis)
library(rgdal)
library(adehabitatHR)
library(maptools)
library(sp)
library(move)
library(plotly)
library(circular)
library(sf)
library(dplyr)
library(tmap)
library(viridis) # my favourite colour palette
work_wd <- "C:/Users/kramer/Dropbox/_GeoData_Mix/Geodata"
raster_wd <- paste(work_wd,"/","rasterfiles",sep='')
shapes_wd <- paste(work_wd,"/","shapefiles",sep='')
output_wd <- "C:/Users/kramer/Dropbox/_BioMove_GISIntro_2019_TeachersOnly/output"
Tiere <- readOGR(paste0(shapes_wd,"/DieTiere.shp"), layer="DieTiere")  # animals
Landn <- readOGR(paste0(shapes_wd,"/Landnutzung.shp"), layer="Landnutzung",stringsAsFactors=FALSE)   #land use
River <- readOGR(paste0(shapes_wd,"/linearegew.shp"), layer="linearegew",stringsAsFactors=FALSE)   #waterways
Kettl <- read.table(paste0(shapes_wd,'/KettleHoles.txt'), header=TRUE, sep='\t') # sep='\t' tab delimited
head(Kettl); class(Kettl)  # data.frame
coordinates(Kettl) <- ~MyX + MyY
head(Kettl); class(Kettl) # ok
mycol <- c('red','antiquewhite','chartreuse4','cornsilk4','blue')
plot(Landn[Landn$NS1 == 1,],col= mycol[1],border='transparent')
plot(Landn[Landn$NS1 == 2,],col= mycol[2],border='transparent',add=T)
plot(Landn[Landn$NS1 == 3,],col= mycol[3],border='transparent',add=T)
plot(Landn[Landn$NS1 == 4,],col= mycol[4],border='transparent',add=T)
plot(Landn[Landn$NS1 == 5,],col= mycol[5],border='transparent',add=T)
plot(Tiere,pch=Tiere[[1]],add=T) ###oops-where are they??
plot(River, col= 'blue', lwd=0.1,add=T)
plot(Kettl, col= 'lightblue',cex=2, pch=15,add=T)
identicalCRS(Landn,Tiere)        # FALSE...
identicalCRS(Landn,River)
identicalCRS(Landn,Kettl)
crs(Tiere)
crs(Landn)  # = projection(Landn)
crs(River)
crs(Kettl)  # aesj - not even defined
head(coordinates(River)[[1]])
head(coordinates(Landn))
head(coordinates(Kettl))  # seems to be the same as River!
crs_t <- proj4string(River) #define the CRS
Landn <- spTransform(Landn,CRS(crs_t)) # project the shapefile, !Landn overwritten!
crs(Kettl) <-  crs_t # define the projection
plot(Landn[Landn$NS1 == 1,],col= mycol[1],border='transparent')
plot(Landn[Landn$NS1 == 2,],col= mycol[2],border='transparent',add=T)
plot(Landn[Landn$NS1 == 3,],col= mycol[3],border='transparent',add=T)
plot(Landn[Landn$NS1 == 4,],col= mycol[4],border='transparent',add=T)
plot(Landn[Landn$NS1 == 5,],col= mycol[5],border='transparent',add=T)
plot(Tiere,pch=Tiere[[1]],add=T) ### here we go!
plot(River, col= 'blue', lwd=0.1,add=T)
plot(Kettl, col= 'cyan',cex=2, pch=19,add=T)
Kettl.sf <- as(Kettl, "sf")
myBuf.sf <- st_buffer(x = Kettl.sf, dist = 1000, nQuadSegs = 50)
plot(myBuf.sf[,], col='cyan')
plot(Kettl, col= 'pink', cex=2, pch=19, add=T)
myBuf.sf
plot(myBuf.sf[,1], col='cyan')
plot(Kettl, col= 'pink', cex=2, pch=19, add=T)
plot(myBuf.sf[,2], col='cyan')
plot(Kettl, col= 'pink', cex=2, pch=19, add=T)
plot(myBuf.sf[,1], col='cyan')
plot(Kettl, col= 'pink', cex=2, pch=19, add=T)
plot(Landn[Landn$NS1 == 1,],col= mycol[1],border='transparent')
plot(Landn[Landn$NS1 == 2,],col= mycol[2],border='transparent',add=T)
plot(Landn[Landn$NS1 == 3,],col= mycol[3],border='transparent',add=T)
plot(Landn[Landn$NS1 == 4,],col= mycol[4],border='transparent',add=T)
plot(Landn[Landn$NS1 == 5,],col= mycol[5],border='transparent',add=T)
plot(myBuf.sf[,1], col='cyan')
plot(Kettl, col= 'pink', cex=2, pch=19, add=T)
plot(Landn[Landn$NS1 == 1,],col= mycol[1],border='transparent')
plot(Landn[Landn$NS1 == 2,],col= mycol[2],border='transparent',add=T)
plot(Landn[Landn$NS1 == 3,],col= mycol[3],border='transparent',add=T)
plot(Landn[Landn$NS1 == 4,],col= mycol[4],border='transparent',add=T)
plot(Landn[Landn$NS1 == 5,],col= mycol[5],border='transparent',add=T)
plot(myBuf.sf[,1], col='cyan')
plot(Kettl, col= 'pink', cex=2, pch=19, add=T)
plot(Landn_sf)
Kettl.sf <- as(Kettl, "sf")
Landn.sf <- as(Landn, "sf")
myBuf.sf <- st_buffer(x = Kettl.sf, dist = 1000, nQuadSegs = 50)
plot(Landn.sf)
plot(Landn.sf$NS1)
plot(Landn.sf[,3])
Landn.sf
plot(Landn.sf[,10])
plot(Landn.sf[,10],col=mycol)
plot(Landn)
plot(Landn.sf[,10],border='transparent',col=mycol)
plot(Landn.sf[,10],border='white',col='lightgrey')
plot(myBuf.sf[,1], col='cyan',add=T)
plot(Kettl, col= 'pink', cex=2, pch=19, add=T)
plot(myBuf.sf[,1], col='cyan')
plot(Kettl, col= 'pink', cex=2, pch=19, add=T)
plot(Kettl.sf, col= 'pink', cex=2, pch=19, add=T)
plot(Landn.sf[,10],border='white',col='lightgrey')
plot(myBuf.sf[,1], col='cyan',add=T)
plot(Kettl.sf, col= 'pink', cex=2, pch=19, add=T)
head(myBuf.sf)
#Landn.sf <- as(Landn, "sf")
myBufLandn.sf <- st_intersection(Landn.sf, myBuf.sf)
class(myBufLandn.sf$NS1)
class(myBufLandn.sf$NS1)
class(myBufLandn.sf$No)
myBufLandn.sf$area <- st_area(myBufLandn.sf)
my.LU.result <- myBufLandn.sf %>% ## data
group_by(No, NS1) %>% ## group the data by the columns 'No' and "NS1"
summarise( area = sum(area),
SPHEROID = first(SPHEROID),
PERIMETER = mean(PERIMETER)) ## summarize all columns names using the function named
for(i in 1:length(unique(my.LU.result$No))){
print(i);print(sum(my.LU.result[my.LU.result$No == i,]$area)/1e6)
}
my.LU.result <- myBufLandn.sf %>% ## data
group_by(No, NS1) %>% ## group the data by the columns 'No' and "NS1"
summarise( area = sum(area),
SPHEROID = first(SPHEROID),
PERIMETER = mean(PERIMETER)) ## summarize all column names using the function
my.LU.result
head(my.LU.result)
str(head(my.LU.result))
head(as.data.frame(my.LU.result))
plot(my.LU.result[, "area"])
plot(my.LU.result[my.LU.result$No == 1, "area"])
plot(my.LU.result[my.LU.result$No == 2, "area"])
plot(my.LU.result[my.LU.result$No == 3, "area"])
table(Tiere@data$ID)
cp <- mcp(Tiere[,1], percent=95) # Minimum Convex Polygon (95%) per TierID # set unout for units!
plot(cp)
plot(Tiere, add=TRUE, col= Tiere$ID)
cp
hrs <- mcp.area(Tiere[,1], percent=seq(50, 100, by = 5),unout='km2')
hrs
writePolyShape(cp, paste(output_wd,"/My_MCP95",sep='')) # old save command take care! Has no prj! Better is writeOGR
writeOGR(cp, paste(output_wd,"/My_MCP95",sep=''))
?writeOGR
writeOGR(cp, dsn=output_wd, "My_MCP95",overwrite=T)
writeOGR(cp, dsn=output_wd, "My_MCP95",'ESRI Shapefile',overwrite=T)
kud <- kernelUD(Tiere[,1], h="href")               # calculate kernel with h="href"
image(kud)                                        # show kernel
kud$'1'@h                                          # Parameter 'h' for ID = 1
kernel.area(kud,unout='km2')
kud1 <- kernelUD(Tiere[,1], h="LSCV")               # calculate kernel with h="LSCV"
image(kud1)
kernel.area(kud1,unout='km2') ## LSCV
homerange1 <- getverticeshr(kud1,percent = 90)      # 90% Home Range for kudl
gArea(homerange1,byid=T)/1e6
homerange2 <- getverticeshr(kud,percent = 90)
gArea(homerange2,byid=T)/1e6                        # same size?
plot(Landn,border='transparent')
plot(homerange1, border='red',col='transparent',add=T)
plot(homerange2, border='blue',col='transparent',add=T)
writeOGR(cp, dsn=output_wd, "kernel_hr1",'ESRI Shapefile',overwrite=T)
writeOGR(cp, dsn=output_wd, "kernel_hr2",'ESRI Shapefile',overwrite=T)
kd <- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))
persp(kd); with(kd, plot_ly(x = x, y = y, z = z, type = "surface")); str(kd)
xy <- coordinates(kud[[1]])
z <- kud[[1]]@data$ud
df_kud <- data.frame(x=xy[,1],y=xy[,2],z=z)
#persp(x=df_kud$x, y=df_kud$y, z= df_kud$z)
#plot3d(x=xy[,1],y=xy[,2],z=z)
df_kud_pt <- df_kud
kud[[1]]@grid@cells.dim
r <- raster(ncols=60,nrows=58)
coordinates(df_kud_pt) <- ~x + y
r_kud <- rasterize(df_kud_pt,r,'z',fun=max)
myz <- matrix(z ,nrow= kud[[1]]@grid@cells.dim[[2]],
ncol= kud[[1]]@grid@cells.dim[[1]],byrow=F)
image(myz)
kd.list <- list(x=xy[,1],y=xy[,2],z=myz)
with(kd.list, plot_ly(x = x, y = y, z = z, type = "surface"))
plot_ly(z = myz, type = "surface")
spatjoin <- over(Tiere,Landn)
Tiere_Landn <- cbind(Tiere@data,spatjoin)
class(Tiere_Landn)
myres <- table(Tiere_Landn$NS1,Tiere_Landn$ID)
myres
#     1   2   3
#  2  48  25  95
#  3 147  64   9
barplot(myres,beside=T)
spatjoin
MCP95 <- readOGR(dsn=output_wd,layer="My_MCP95",stringsAsFactors=FALSE)
crs_tmp <- crs(Tiere)
crs(MCP95) <- crs_tmp
summary(MCP95) # oder:   MCP_t@data
plot(Landn,border='transparent')
plot(MCP95, add=T, border = 'grey')
plot(Landn,border='grey')
plot(MCP95, add=T, border = 'grey')
table(Tiere[[1]])
Tiere
table(Tiere$ID)
MCP95[1,]
rp1 <- spsample(MCP95[1,],n=195,type='random') #first row  [1,] is MCP of animal ID = 1
plot(Landn,border='transparent')
plot(MCP95, add=T, border = 'grey')
points(rp1,col='red',pch=3)
class(rp1)
ID_r <- as.data.frame(cbind(rep(1, length(rp1)))) # create data.frame to make SpatialPointsDataFrame
ID_r
length(rp1)
rp1_final <- SpatialPointsDataFrame(coords=coordinates(rp1),data=ID_r,crs = CRS(crs_t))
rp1_final <- SpatialPointsDataFrame(coords=coordinates(rp1),data=ID_r,proj4string =  = CRS(crs_t))
rp1_final <- SpatialPointsDataFrame(coords=coordinates(rp1),data=ID_r,proj4string = CRS(crs_t))
rp1_final
spatjoin_rp <- over(rp1_final,Landn)
rp_Landn <- cbind(rp1_final@data,spatjoin_rp) #### !!!!!!!!!!!!
myres_rp <- table(rp_Landn$NS1)
myres_rp
chi_matrix <- matrix(data=c(136,59,48,147),ncol=2)
chisq.test(chi_matrix)
aa <- chi_matrix[1,1]
bb <- chi_matrix[1,2]
cc <- chi_matrix[2,1]
dd <- chi_matrix[2,2]
Na <- aa+bb
Nb <- cc+dd
Ns <- aa+cc
Nf <- bb+dd
N <- Na+Nb
mychi <- (N*(abs((aa*dd) - (bb*cc)) - (N/2))^2) / (Ns*Nf*Na*Nb)
mychi
Fuchs <- read.table(paste0(shapes_wd,"/Fuxi.txt"), header=TRUE, sep=',')
head(Fuchs)
class(Fuchs) # Achtung! not spatial, not a move Object!
coordinates(Fuchs) <-  ~lon + lat
crs_kurs <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")    # geographical,datum WGS84
proj4string(Fuchs) <- crs_kurs     # Define Projection
summary(Fuchs)
Fuchs <- read.table(paste0(shapes_wd,"/Fuxi.txt"), header=TRUE, sep=',')
head(Fuchs)
class(Fuchs) # Achtung! not spatial, not a move Object!
coordinates(Fuchs) <-  ~lon + lat
crs_kurs <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84")    # geographical,datum WGS84
proj4string(Fuchs) <- crs_kurs     # Define Projection
summary(Fuchs)
plot(Fuchs)  # warum funktioniert es nicht????? -> Antwort siehe oben!
Fuchs_t <- spTransform(Fuchs,crs(Tiere))
plot(Fuchs_t,pch=18,col='grey',cex=1)
plot(Fuchs,add=T)
Fuchs <- read.table(paste0(shapes_wd,"/Fuxi.txt"), header=TRUE, sep=',')
head(Fuchs)
class(Fuchs) # Achtung! not spatial, not a move Object!
MoveFuchs <- read.table(paste0(shapes_wd,"/Fuxi.txt"), header=TRUE, sep=',')
dates <- as.character(MoveFuchs$Date)
times <- as.character(MoveFuchs$Time)
DateTime <- paste(dates, times)
DT <- strptime(DateTime, "%m/%d/%Y %H:%M:%S")
MoveFuchs <- cbind(MoveFuchs, DT)
head(MoveFuchs)
my_fox <- move(x=MoveFuchs$lon, y= MoveFuchs$lat,
time=as.POSIXct(MoveFuchs$DT,format="%Y-%m-%d %H:%M:%S"),
proj= CRS("+proj=longlat"),data=MoveFuchs,animal="FuchsX"  )  #now a Move Object!
show(my_fox)
plot(my_fox, type="o", col=3, lwd=2, pch=20, xlab="location_long",
ylab="location_lat")
show(my_fox)
SJ = 0.5
b = 0.2
N = 1000
(SJnew <- SJ * exp(-b*N))
SJ = 0.5
b = 0.2
N = 1000
(SJ_Ricker <- SJ * exp(-b*N))
(logit_Ricker <- 1/(1+exp(SJ_Ricker)))
SJ = 0.9
b = 0.2
N = 1000
(SJ_Ricker <- SJ * exp(-b*N))
(logit_Ricker <- 1/(1+exp(SJ_Ricker)))
SJ = 0.1
b = 0.2
N = 1000
(SJ_Ricker <- SJ * exp(-b*N))
(logit_Ricker <- 1/(1+exp(SJ_Ricker)))
SJ = 0.1
b = 1
N = 1000
(SJ_Ricker <- SJ * exp(-b*N))
(logit_Ricker <- 1/(1+exp(SJ_Ricker))  )
SJ = 0.1
b = -1
N = 1000
(SJ_Ricker <- SJ * exp(-b*N))
(logit_Ricker <- 1/(1+exp(SJ_Ricker))  )
SJ = 0.1
b = 31
N = 1000
(SJ_Ricker <- SJ * exp(-b*N))
(logit_Ricker <- 1/(1+exp(SJ_Ricker))  )
?exp
exp(3)
log(exp(3))
log(3)
exp(SJ_Ricker)
SJ_Ricker
SJ = 0.1
b = 1
N = 1000
(SJ_Ricker <- SJ * exp(-b*N))
SJ = 0.1
b = 0.3
N = 1000
(SJ_Ricker <- SJ * exp(-b*N))
SJ_Ricker
(SJ_Ricker <- SJ * exp(-b*N))
(logit_Ricker <- 1/(1+exp(SJ_Ricker))  )
exp(SJ_Ricker)
SJ = 0.1
b = -0.3
N = 1000
(SJ_Ricker <- SJ * exp(-b*N))
(logit_Ricker <- 1/(1+exp(SJ_Ricker))  )
exp(SJ_Ricker)
3.4*6
28.40+55.85
library(sp)
library(sf)
library(tmap)
library(dismo)
library(raster)
library(GISTools)
library(rgdal)
library(maptools)
library(rgeos)
library(rgl)
library(rasterVis)
library(viridis)
library(units)
work_wd <- setwd("C:/Users/kramer/PopDynIZW Dropbox/Teaching/_TU_BiodivDynamics2020/DataBerlin")
maps_wd <- paste(work_wd, "/", "Raster_ascii", sep = '')
fut_wd <- paste(work_wd, "/", "Raster_future", sep = '')
maxent_wd <- paste(work_wd, "/", "Shapefiles", sep = '')
output_wd <- paste("C:/Users/kramer/PopDynIZW Dropbox/Teaching/_TU_BiodivDynamics2020", "/", "output", sep = '')
setwd(dir = maps_wd)
maps_wd
work_wd <- setwd("C:/Users/kramer/PopDynIZW Dropbox/Teaching/_TU_BiodivDynamics2020/DataBerlin")
maps_wd <- paste(work_wd, "/", "Raster_ascii", sep = '')
fut_wd <- paste(work_wd, "/", "Raster_future", sep = '')
maxent_wd <- paste(work_wd, "/", "Shapefiles", sep = '')
output_wd <- paste("C:/Users/kramer/PopDynIZW Dropbox/Teaching/_TU_BiodivDynamics2020", "/", "output", sep = '')
setwd(dir = maps_wd)
filenames <- list.files()
head(x = filenames)
predictors <- stack(x = filenames)
filenames
ras1 <- raster(x = paste(maps_wd, '/built_100m_3035.asc', sep = ''))
plot(ras1)
files.full <- list.files(path = maps_wd, pattern = '.asc$',
full.names = TRUE )
files.full[1:2]
predictors <- stack(x = files.full)
plot(predictors)
ras1
shape_wd <- paste(work_wd, "/", "Shapefiles", sep = '')
filenames <- list.files(shape_wd)
head(x = filenames)
filenames
B_traffic <- st_read(dsn = shape_wd,
layer = "line_traffic_volume_2014_utf8_3035",
stringsAsFactors = FALSE)[, c(1:3, 5, 7, 17, 18)]
B_traffic <- st_read(dsn = shape_wd,
layer = "line_traffic_volume_2014_utf8_3035",
stringsAsFactors = FALSE)[, c(1:3)]
setwd(dir = maps_wd)
filenames <- list.files()
head(x = filenames)
ras1 <- raster(x = paste(maps_wd, '/built_100m_3035.asc', sep = ''))
plot(ras1)
files.full <- list.files(path = maps_wd, pattern = '.asc$',
full.names = TRUE )
files.full[1:2]
predictors <- stack(x = files.full)
plot(predictors) ####### take out green_areas_100m_3035
filenames <- list.files(shape_wd)
head(x = filenames)
filenames
B_traffic <- st_read(dsn = shape_wd,
layer = "line_traffic_volume_2014_utf8_3035",
stringsAsFactors = FALSE)[, c(1:3)]
tmap_mode(mode = "plot")
tm_shape(shp = ras1) +
tm_raster(palette = "Greys",
legend.show = FALSE) +
tm_shape(shp = B_traffic) +
tm_lines(col = "dodgerblue3")
pt_file <- paste(work_wd, 'my_fox_maxent.csv', sep = '/')
sp_recs <- read.table(file = pt_file, header = TRUE, sep = ',')
paste(work_wd, 'my_fox_maxent.csv', sep = '/')
pt_file <- paste(work_wd, 'my_fox_maxent_3035.csv', sep = '/')
sp_recs <- read.table(file = pt_file, header = TRUE, sep = ',')
class(x = sp_recs)
head(sp_recs)
sp_recs_sf <- st_as_sf(x = data.frame(sp_recs),
coords = c("X", "Y"),
crs = 3035,
sf_column_name = "geometry" )
sp_recs_sf
tmap_mode(mode = "plot")
tmap_mode(mode = "plot")
sp_recs_sf <- st_as_sf(x = data.frame(sp_recs),
coords = c("Y", "X"),
crs = 3035,
sf_column_name = "geometry" )
tmap_mode(mode = "plot")
tmap_mode(mode = "plot")
tmap_mode(mode = "plot")
tmap_mode(mode = "plot")
plot(B_traffic)
plot(B_traffic[3])
tmap_mode(mode = "plot")
tm_shape(shp = B_traffic[3]) +
tm_lines(col = "dodgerblue3")
+
tm_shape(shp = sp_recs_sf) +
tm_dots(shape = 16, size = 1, col= 'red')
B_traffic
sp_recs_sf
sp_recs_sf <- st_as_sf(x = data.frame(sp_recs),
coords = c("X", "Y"),
crs = 3035,
sf_column_name = "geometry" )
sp_recs_sf
plot(x = as(B_traffic, "Spatial"), col = 'grey', border = 'white')
plot(x = as(B_traffic[3], "Spatial"), col = 'grey', border = 'white')
points(x = sp_recs$X, sp_recs$Y, cex = 0.5, pch = 15)
plot(x = as(sp_recs_sf, "Spatial"), col = 'blue', add = T) # easy handling of shapefiles
tmap_mode(mode = "plot")
tm_shape(shp = ras1) +
tm_raster(palette = "Greys",
legend.show = FALSE) +
tm_shape(shp = B_traffic[3]) +
tm_lines(col = "dodgerblue3")   +
tm_shape(shp = sp_recs_sf) +
tm_dots(shape = 16, size = 1, col= 'red')
