moths.ln <- fitsad(x=moths, sad="lnorm") #log-normal distribution
# get rank abundance objects
moths.ge.rad <- radpred(moths.ge)
moths.ls.rad <- radpred(moths.ls)
moths.ln.rad <- radpred(moths.ln)
# Plot the curves
plot(moths.ln.rad)
plot(moths.ln.rad, xlab = "Rank", ylab = "Abundance", log = "y",
type = "l", col = "green", lty = 1, lwd = 6)
# We can superimpose the curve to the rank plot
plot(moths.rad)
lines(moths.ge.rad, col="red")
lines(moths.ls.rad, col="blue")
lines(moths.ln.rad, col="green")
legend("topright",c("Geometric", "Logseries", "lognormal"),lty=1, col=c("red", "blue", "green"))
## looking at the fits
logLik(moths.ge)
logLik(moths.ls)
logLik(moths.ln)
birds1 <- data.frame(Species = c('BlueTit', 'Robin', 'Magpie',
'GreatTit'),
Abundance = rep(9, 4))
birds1
## now let us get the pi, ln(pi), N and S to calculate Shannon index
N <- sum(birds1$Abundance)
S <- nrow(birds1)
pi <- birds1$Abundance/N
lnpi <- log(pi)
H <- -sum(pi*lnpi)
H
# 1. transpose the data
birds1.transpose <- as.data.frame(t(birds1[, -1]))
colnames(birds1.transpose) <- birds1$Species
birds1.transpose
# Get diversity value
?diversity
H_vegan <- diversity(birds1.transpose, index = "shannon")
H_vegan
# We create a second community with no species in common with the first one
birds2 <- data.frame(Species = c('Sparrow', 'Dove', 'Crow'),
Abundance = c(4,5,20))
birds2
# the transpose matrix for the analysis
birds2.transpose <- as.data.frame(t(birds2[, -1]))
colnames(birds2.transpose) <- birds2$Species
birds2.transpose
# Both communities in the same table
# transpose data and get sums
birds.both <- merge(birds1, birds2, by = 'Species', all = T)
birds.both$Abundance.x[is.na(birds.both$Abundance.x)] <- 0
birds.both$Abundance.y[is.na(birds.both$Abundance.y)] <- 0
birds.both
birds.all <- rowSums(birds.both[,2:3])
birds.all
both.trans <- as.data.frame(t(birds.both[, -1]))
colnames(both.trans) <- birds.both$Species
rownames(both.trans) <- c("birds1", "birds2")
both.trans
all.trans <- colSums(both.trans)
# shannon diversity for each sample and for the sum
H1 <- diversity(both.trans, index = "shannon")
H2 <- diversity(all.trans, index = "shannon")
H1
H2
# Hill number order 1 (library iNEXT)
HN1.birds1 <- iNEXT(birds1$Abundance)
HN1.birds1$AsyEst
HN1.birds2 <- iNEXT(birds2$Abundance)
HN1.birds2$AsyEst
HN1.birdsboth <- iNEXT(birds.all)
HN1.birdsboth$AsyEst
data(spider)
str(spider)
example1 <- iNEXT(spider, q = 0, datatype = "abundance")
example1$DataInfo
#Show a summary of the data with diversity estimates in rarefied and extrapolated samples
example1$iNextEst
# show asymptotic estimates
example1$AsyEst
# We define the number of samples size that we want to use for estimation
m <- c(1, 50, 100, 200, 400)
example2 <- iNEXT(spider, q = c(0,1,2), datatype = "abundance", size = m)
example2$iNextEst
ggiNEXT(example1, type=1) # Curve for sample size
ggiNEXT(example2, type=1, facet.var="site")
ggiNEXT(example2, type=1, facet.var="order")
?ggiNEXT
example2
ggiNEXT(example2, type=1, facet.var="Assemblage")
ggiNEXT(example2, type=1, facet.var="Both")
# adding grey=TRUE, we get a plot in black and white theme
ggiNEXT(example1, type=3) # Curve for sample size
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
# Bird data
bird_data <- read.csv(here("data","data_berlin","animal_data",
"Birds_Berlin_exercise_planillo2021.csv") )
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
library(here)
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
ggiNEXT(example1, type=3) # Curve for sample size
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
estINEXTsize
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = .252,
conf = NULL) # Remove the confidence intervals
?estimateD
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252,conf = NULL) # Remove the confidence intervals
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = 0.95) # Remove the confidence intervals
habitat <- factor(c("Girdled", "Logged"))
plot(estINEXTcover2$'q = 0' ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = NULL) # Remove the confidence intervals
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252 )#, conf = NULL) # Remove the confidence intervals
habitat <- factor(c("Girdled", "Logged"))
plot(estINEXTcover2$'q = 0' ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL)
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.0)
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = NULL)
#estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = NULL) #this does not work any more
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.0)# Remove the confidence intervals
habitat <- factor(c("Girdled", "Logged"))
plot(estINEXTcover2$'q = 0' ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTcover2
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = NULL) #this does not work any more
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.0)# Remove the confidence intervals
habitat <- factor(c("Girdled", "Logged"))
plot(estINEXTcover2$'Order.q = 0' ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTcover2$Order.q
plot(estINEXTcover2[estINEXTcover$Order.q == 0] ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
plot(estINEXTcover2[estINEXTcover2$Order.q == 0] ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTcover2$Order.q == 0
mysub <- subset(estINEXTcover2,estINEXTcover2$Order.q == 0 )
mysub
plot(estINEXTcover2[estINEXTcover2$Order.q == 0] ~ Assemblage, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
plot(estINEXTcover2[estINEXTcover2$Order.q == 0] ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
mysub <- subset(estINEXTcover2,estINEXTcover2$Order.q == 0 )
plot(mysub ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
plot(mysub$SC ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
mysub
# Bird data
bird_data <- read.csv(here("data","data_berlin","animal_data",
"Birds_Berlin_exercise_planillo2021.csv") )
head(bird_data)
str(bird_data)
summary(bird_data)
bird_data
# get the data in the proper format
bird_data <- column_to_rownames(bird_data, "site")
bird_data <- t(bird_data)
# run inext function
birds_inext <- iNEXT(bird_data, q = 0, datatype = "abundance") # q = 0 -> species richness
#Show a summary of the data
birds_inext$DataInfo
#Show a summary of the data with diversity estimates in rarefied and extrapolated samples
head(birds_inext$iNextEst)
# show asymptotic estimates
birds_inext$AsyEst
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="none") # not all plots sampled equally
?ggiNEXT
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") # not all plots sampled equally
# get minimum number of individuals from data
min_abund <- min(birds_inext$DataInfo$n)
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data, datatype = "abundance", base = "size", level = (min_abund*2),
conf = NULL)
birds_estINEXTsize
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', fig.width = 6, fig.height = 6)
library(knitr)
library(vegan)
library(iNEXT)
library(sads)
library(tidyverse)
library(terra)
library(here)
envir   <- read.csv(here('data','data_berlin','animal_data','transects_allenvir_100m.csv'))
# Export dataframe of species abundance and environmental variables for each site
species <- read.csv(here('data','data_berlin','animal_data','birds_berlin_exercise_planillo2021.csv'))
envir   <- read.csv(here('data','data_berlin','animal_data','transects_allenvir_100m.csv'))
library(knitr)
library(vegan)
library(iNEXT)
library(BAT)
library(psych)
library(dplyr)
library(ggplot2)
library(terra)
library(here)
birds <- read.csv(here("data","data_berlin","animal_data",
"birds_berlin_exercise_planillo2021.csv") )
## look at the data
ncol(birds)
head(birds)
str(birds)
sites <- birds$site
birds.data <- birds[,-71] # remove site from data
rownames(birds.data) <- birds$site
str(birds.data)
envir <- read.csv(here("data","data_berlin","animal_data","birds_transects_allenvir_100m.csv"))
head(envir)
str(envir)
envir <- read.csv(here("data","data_berlin","animal_data","birds_transects_allenvir_100m.csv"))
### The packages (repetition) ###
library(here)
library(sp)
library(sf)
library(tmap)
library(dismo)
library(terra)
library(GISTools)
### The workspace  (repetition) ###
getwd() # you can also use the package 'here()'
### The workspace  (repetition) ###
getwd() # you can also use the package 'here()'
# my data are outside my course-folder, therefore I have to do it the old-fashioned way.
root_wd <- here::here()
# relative to work-wd
maps_wd <- paste(root_wd,"/","data/data_borneo/geo_raster_current_asc",sep='') # or:
recs_wd <- here::here("data","data_borneo","animal_data") # simpler
# the output folder should have been created by you during Tutorial 2 'R goes spatial'.
# It should contain the hillshade.asc
output_wd <- here::here("output")
setwd(output_wd) ## set to the OUTPUT folder!
getwd() # check
ras1 <- terra::rast(paste(maps_wd,'/bio_asc_01.asc',sep=''))
ras1
### Data import - Load spatial data (repetition) ###
ras1 <- terra::rast(x = paste(maps_wd,'/bio_asc_01.asc',sep=''))
# assign the projection (crs - coordinate reference system)
# ras1@crs <- CRS("+proj=longlat +datum=WGS84") ## not needed in terra!
ras24 <- terra::rast(paste(maps_wd,'/bio_asc_24.asc',sep='')) #DEM
ras42 <- terra::rast(x = paste(maps_wd,'/bio_asc_42.asc',sep='')) # land use
hillsh <- terra::rast(x = paste(maps_wd,'/borneo_hillshade.asc',sep=''))
ras24 <- terra::rast(here("data","data_borneo", "geo_raster_current_asc", "bio_asc_24.asc")) #DEM
ras42 <- terra::rast(x = paste(maps_wd,'/bio_asc_42.asc',sep='')) # land use
hillsh <- terra::rast(x = paste(maps_wd,'/borneo_hillshade.asc',sep=''))
# the list.files command is very helpful to check what is in the folders
# use 'pattern' for searching for special file types, here .asc-files:
files <- list.files(path= maps_wd, pattern='.asc$',
full.names=TRUE )
files # these are just names! To load them as spatial objects, use raster() or stack()
predictors <- c(ras1,ras24,ras42)
plot(predictors)
plot(predictors, col= viridis(100)) # might take some time depending on your computer
library(viridis)
predictors
# set CRS:
predictors@crs <- CRS(projargs = "+init=epsg:4326")
plot(predictors, col= viridis(100)) # might take some time depending on your computer
# package sp (old, but easier for plotting)
Borneo_shp <- readOGR(dsn=maps_wd, layer="borneo_admin",
stringsAsFactors=FALSE)[,c(1:3,5,7,17,18)] #only load some of the columns of df
?readOGR
# package sf
Borneo_shp <- st_read(dsn=maps_wd, layer="borneo_admin",
stringsAsFactors=FALSE)[,c(1:3,5,7,17,18)] #only load some of the columns of df
?st_read
# package sf
Borneo_shp <- st_read(dsn=maps_wd, layer="borneo_admin.shp",
stringsAsFactors=FALSE)[,c(1:3,5,7,17,18)] #only load some of the columns of df
Borneo_shp <- st_read(dsn=maps_wd, layer="borneo_admin.shp")
vecs_wd <- here::here("data","data_borneo","geo_vector") # shapefile
vecs_wd
# package sf
Borneo_shp <- st_read(dsn=vecs_wd, layer="borneo_admin.shp",
stringsAsFactors=FALSE)[,c(1:3,5,7,17,18)] #only load some of the columns of df
Borneo_shp <- st_read(dsn=vecs_wd, layer="borneo_admin.shp")
Borneo_shp <- st_read(dsn=vecs_wd, layer="borneo_admin")
# package sf
Borneo_shp <- st_read(dsn=vecs_wd, layer="borneo_admin",
stringsAsFactors=FALSE)[,c(1:3,5,7,17,18)] #only load some of the columns of df
Borneo_shp
## Borneo outline polygon
Borneo_shp_sf <- st_read(dsn = maps_wd,
layer = "borneo_admin",
stringsAsFactors = FALSE)[,c(1:3,5,7,17,18)]
## Borneo outline polygon
Borneo_shp_sf <- st_read(dsn = vecs_wd,
layer = "borneo_admin",
stringsAsFactors = FALSE)[,c(1:3,5,7,17,18)]
# Protected areas (PA) polygon
PA_shp_sf <-  st_read(dsn = vecs_wd,
layer = "Bor_PA",
stringsAsFactors = FALSE)[, c(1:4)]
# Rivers lines
River_shp_sf <- st_read(dsn = vecs_wd,
layer = "sn_100000",
stringsAsFactors = FALSE)
# filename
spec_pt_filename <- paste(recs_wd,'/','MyNewSpecies.csv', sep='')
spec_pt_filename
# read the file
sp_recs <- read.csv(file = spec_pt_filename, header=TRUE, sep=',')
#convert it to spatial object (sf here)
sp_recs_sf <- st_as_sf(x = sp_recs,
coords = c("long","lat"), # columns  for the coordinates
crs = 4326, # define crs, 4326 is the EPSG code
sf_column_name = "geometry",
remove=F) # sf needs a geometry column and you have to name it
ras42 <- terra::rast(x = here(maps_wd,"bio_asc_42.asc")) # land use
# load a second species
river_pt_filename <- here(recs_wd,"RIVERsim.csv")
river_recs        <- read.csv(file = river_pt_filename, header=TRUE, sep=',')
river_recs_sf     <- st_as_sf(x = river_recs,
coords = c("long", "lat"),
crs = 4326,
sf_column_name = "geometry")
plot(ras42, col=grey.colors(20))
plot(PA_shp,border='green', lwd=1.8, add=T)
plot(PA_shp_sf,border='green', lwd=1.8, add=T)
plot(sp_recs_sf$geometry, pch= '*',cex=1,col='deeppink',add=T)
text(112, 5, 'Starting with SDMs', cex=2, col= 'red')
text(112, 5, 'Starting with SDMs', cex=1.5, col= 'red')
plot(River_shp_sf[,3], col='dodgerblue4', add=T)
plot(ras42, col=grey.colors(20))
plot(PA_shp_sf,border='green', lwd=1.8, add=T)
plot(sp_recs_sf$geometry, pch= '*',cex=1,col='deeppink',add=T)
text(112, 5, 'Starting with SDMs', cex=1.5, col= 'red')
plot(River_shp_sf[,3], col='dodgerblue4', add=T)
plot(PA_shp_sf$geometry,border='green', lwd=1.8, add=T)
plot(ras42, col=grey.colors(20))
plot(PA_shp_sf$geometry,border='green', lwd=1.8, add=T)
plot(sp_recs_sf$geometry, pch= '*',cex=1,col='deeppink',add=T)
text(112, 5, 'Starting with SDMs', cex=1.5, col= 'red')
text(112, 6, 'Starting with SDMs', cex=1.5, col= 'red')
plot(River_shp_sf[,3], col='dodgerblue4', add=T)
# workaround for slow computers. First, aggregate the 1 km² resolution into 50*50 km
agg_pred <- aggregate(x=predictors,fact=50,FUN=mean)
plot(agg_pred)
raster::pairs(agg_pred, method = 'spearman')
detach("raster")
pairs(agg_pred, method = 'spearman')
?pairs
terra::pairs(agg_pred, method = 'spearman')
# Plot the differences (residuals) between the rasters:
diff <- terra::corLocal(x = agg_pred[[1]], y = agg_pred[[2]], method = 'spearman')
# Plot the differences (residuals) between the rasters:
diff <- raster::corLocal(x = agg_pred[[1]], y = agg_pred[[2]], method = 'spearman')
# Plot the differences (residuals) between the rasters:
diff <- terra::focalCor(x = agg_pred[[1]], y = agg_pred[[2]], method = 'spearman')
# Plot the differences (residuals) between the rasters:
diff <- terra::focalPairs(x = agg_pred[[1]], y = agg_pred[[2]], method = 'spearman')
agg_pred
?focalPairs
# Plot the differences (residuals) between the rasters:
diff <- terra::focalPairs(x = agg_pred,w = 3, fun = 'spearman')
# Plot the differences (residuals) between the rasters:
diff <- terra::focalPairs(x = agg_pred, w = 3, fun = 'pearson', na.rm = TRUE')
)
m
+
a
)
))
15)
# Plot the differences (residuals) between the rasters:
diff <- terra::focalPairs(x = agg_pred, w = 3, fun = 'pearson', na.rm = TRUE)
plot(diff)
# Plot the differences (residuals) between the rasters:
diff <- terra::focalPairs(x = agg_pred, w = 3, 'pearson', na.rm = TRUE)
plot(diff)
# Plot the differences (residuals) between the rasters:
diff <- terra::focalPairs(x = agg_pred, w = 1, 'pearson', na.rm = TRUE)
# Plot the differences (residuals) between the rasters:
diff <- terra::focalPairs(x = agg_pred, w = 5, 'pearson', na.rm = TRUE)
plot(diff)
terra::pairs(agg_pred, method = 'spearman')
head(Borneo_shp_sf)
plot(Borneo_shp_sf[,3]) # column 3 is NAME_0
?rasterize
Mal_ras <- rasterize(x=Borneo_shp_sf[Borneo_shp_sf$NAME_0 %in%
c("Brunei","Malaysia"),], y=ras24, field=1,
background=0.1)
plot(Mal_ras)
Sab_ras <- rasterize(x=Borneo_shp_sf[Borneo_shp_sf$NAME_1 == 'Sabah',],
y=ras24, field=1, background=0.1)
PA_ras <- rasterize(x=PA_shp, y=ras24, field=1, background=0.1)
### Crosscheck with plot
par(mfrow=c(1,2))
plot(Sab_ras)
plot(PA_ras) #n.b.: only 1 and small values, no NA
PA_ras <- rasterize(x=PA_shp_sf, y=ras24, field=1, background=0.1)
### Crosscheck with plot
par(mfrow=c(1,2))
plot(Sab_ras)
plot(PA_ras) #n.b.: only 1 and small values, no NA
par(mfrow=c(1,1))
ras24_300 <- ras24 <= 300
plot(ras24_300)
bias_tmp <- ras24_300 + Sab_ras + Mal_ras + PA_ras
bias_tmp
plot(bias_tmp)
# get the maximum value in the layer, standardize it and round to two decimals
maxval <- max(values(bias_tmp),na.rm=T)
bias_tmp2 <- bias_tmp/maxval
bias_tmp3 <- round(bias_tmp2, digits=2)
## same as in one go:
bias1 <- round(bias_tmp/max(values(bias_tmp),na.rm=T),digits=2)
table(values(bias1))
### in case of having 0 somewhere:
bias1[values(bias1 == 0)] <- 0.01 # because MaxEnt
values(bias1)
values(bias1 == 0)
a <- values(bias1 == 0)
a
bias1[values(bias1 == 0)]
# does not take 0!
table(values(bias1))
compareRaster(ras24,bias1) # the same?
?compareRaster
terra::compareGeom(ras24,bias1) # the same?
# Are they really the same???
length(which(!is.na(values(bias1))))
length(which(!is.na(values(ras24))))
### Plot the bias file
plot(bias1, col = viridis(7)) #or col = grey.colors(7)
## since I used setwd() to the output folder, it is automatically stored there,
## if not, paste the path to the filename, i.e.
## filename=paste0(output_wd,"/bias_2022.asc")
writeRaster(bias1, filename="bias_2023.asc", datatype='ascii',
overwrite=TRUE,NAflag=-9999)
install.packages("maxnet")
library(maxnet)
data(bradypus)
bradypus
p <- bradypus$presence
p
data <- bradypus[,-1]
mod <- maxnet(p, data)
plot(mod, type="cloglog")
mod <- maxnet(p, data, maxnet.formula(p, data, classes="lq"))
plot(mod, "tmp6190_ann")
mod
plot(mod, type="cloglog")
predict(mod, newdata, clamp=T, type=c("logistic"))
p
bradypus
plot(mod, type="logistic")
