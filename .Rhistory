plot(x = wsp)
plot(x = wsp$wingspan)
str(wsp)
plot(x = wsp)
# solution
plot(x = wsp[,1])
plot(x = wsp_table)
plot(x = wsp_table)
# solution
plot(x = wsp_table$wingspan)
#- the table also contains character strings / factors, so plot looks ugly
plot(x = wsp_table)
#- solution
plot(x = wsp_table$wingspan)
color_for_insect_type <- ifelse(wsp$insect == 'dragonfly', yes = 'red', no = 'blue')
wsp
color_for_insect_type <- ifelse(wsp_table$insect == 'dragonfly', yes = 'red', no = 'blue')
# color_for_insect_type
plot(x = wsp_table$wingspan, col= color_for_insect_type)
color_for_insect_type
color_for_insect_type <- ifelse(wsp_table$insect == 'dragonfly',
yes = 'red', no = 'blue')
#- add argument for color: col = color_for_insect_type
plot(x = wsp_table$wingspan, col= color_for_insect_type)
color<-c(dragonfly='green', butterfly='blue3')
color
plot(x = wsp_table$wingspan, col=color)
#- add argument for color: col = color_for_insect_type
plot(x = wsp_table$wingspan, col= color_for_insect_type)
# now have a look at
?base::plot # and
?par # of how to make the plots more pretty and how to set graphical parameters
plot(x = wsp_table$wingspan, col = color_for_insect_type, pch = 3,
xlab = "unsorted values", ylab = "wsp [mm]", cex = 3,
cex.lab = 1.2, cex.axis = 0.5, las = 2,
col.axis = "blue")
# now have a look at
?base::plot # and
?par # of how to make the plots more pretty and how to set graphical parameters
plot(x = wsp_table$wingspan, col = color_for_insect_type, pch = 3,
xlab = "unsorted values", ylab = "wsp [mm]", cex = 3,
cex.lab = 1.2, cex.axis = 5, las = 2,
col.axis = "blue")
# now have a look at
?base::plot # and
?par # of how to make the plots more pretty and how to set graphical parameters
plot(x = wsp_table$wingspan, col = color_for_insect_type, pch = 3,
xlab = "unsorted values", ylab = "wsp [mm]", cex = 3,
cex.lab = 1.2, cex.axis = 2, las = 2,
col.axis = "blue")
# now have a look at
?base::plot # and
?par # of how to make the plots more pretty and how to set graphical parameters
plot(x = wsp_table$wingspan, col = color_for_insect_type, pch = 3,
xlab = "unsorted values", ylab = "wsp [mm]", cex = 3,
cex.lab = 1.5, cex.axis = 1, las = 2,
col.axis = "blue")
colors()
colors(1:10)
colors()[1:5]
# now have a look at
?base::plot # and
?par # of how to make the plots more pretty and how to set graphical parameters
plot(x = wsp_table$wingspan, col = color_for_insect_type, pch = 3,
xlab = "unsorted values", ylab = "wsp [mm]", cex = 3,
cex.lab = 1.5, cex.axis = 1, las = 2,
col.axis = "blue", bg = "antiquewhite2")
# now have a look at
?base::plot # and
?par # of how to make the plots more pretty and how to set graphical parameters
plot(x = wsp_table$wingspan, col = color_for_insect_type, pch = 3,
xlab = "unsorted values", ylab = "wsp [mm]", cex = 3,
cex.lab = 1.5, cex.axis = 1, las = 2,
col.axis = "blue", bg = "antiquewhite5")
# now have a look at
?base::plot # and
?par # of how to make the plots more pretty and how to set graphical parameters
plot(x = wsp_table$wingspan, col = color_for_insect_type, pch = 3,
xlab = "unsorted values", ylab = "wsp [mm]", cex = 3,
cex.lab = 1.5, cex.axis = 1, las = 2,
col.axis = "blue", bg = "antiquewhite")
# now have a look at
?base::plot # and
?par # of how to make the plots more pretty and how to set graphical parameters
plot(x = wsp_table$wingspan, col = color_for_insect_type, pch = 3,
xlab = "unsorted values", ylab = "wsp [mm]", cex = 3,
cex.lab = 1.5, cex.axis = 1, las = 2,
col.axis = "blue", bg = "grey33")
# now have a look at
?base::plot # and
?par # of how to make the plots more pretty and how to set graphical parameters
plot(x = wsp_table$wingspan, col = color_for_insect_type, pch = 3,
xlab = "unsorted values", ylab = "wsp [mm]", cex = 3,
cex.lab = 1.5, cex.axis = 1, las = 2,
col.axis = "blue", bg = "yellow")
?abline
plot(x = wsp_table$wingspan, col = color_for_insect_type)
abline(v = 12.5, lty = "dashed", col = "red") #lty = line type
abline(h = 75, lty = "dotted")
plot(x = wsp_table$wingspan, col = color_for_insect_type,pch = 16, cex = 3)
arrows(x0 = 5, y0 = 125, x1 = 5, y1 = 82, col = "purple")
arrows(x0 = 15, y0 =  70, x1 = 17, y1 =  75, col = "black", lwd = 3) #lwd=line width
text(x = 3, y = 70, labels = "DRAGONFLY",cex=0.8)
#First, create new data set called " mydata" with new column "wind_speed":
wind_speed <- rep(x = 50:70, length.out = nrow(wsp))
mydata <- cbind(wsp, wind_speed)
head(x = mydata)
#First, create new data set called " mydata" with new column "wind_speed":
wind_speed <- rep(x = 50:70, length.out = nrow(wsp_table))
mydata <- cbind(wsp, wind_speed)
head(x = mydata)
#First, create new data set called " mydata" with new column "wind_speed":
wind_speed <- rep(x = 50:70, length.out = nrow(wsp_table))
mydata <- cbind(wsp_table, wind_speed)
head(x = mydata)
par(mfrow = c(1, 2))
boxplot(formula = mydata$wingspan ~ mydata$wind_speed)
hist(x = mydata$wingspan, main = '')
# par(mfrow = c(2, 1)) # what happens here? try it out
boxplot(formula = mydata$wingspan ~ mydata$wind_speed)
hist(x = mydata$wingspan, main = '')
par(mfrow = c(2, 1))
par(mfrow = c(2, 1))
# par(mfrow = c(2, 1)) # what happens here? try it out
boxplot(formula = mydata$wingspan ~ mydata$wind_speed)
hist(x = mydata$wingspan, main = '')
par(mfrow = c(1,2))
hist(x = mydata$wingspan, breaks = 2, main = '')
hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan),
by = 3),
freq = FALSE, col = 'lightgrey', main = '')
par(mfrow = c(1, 1))
seq(min(mydata$wingspan),
max(mydata$wingspan),
by = 3)
par(mfrow = c(1,2))
hist(x = mydata$wingspan, breaks = 2, main = '')
hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan),
by = 10),
freq = FALSE, col = 'lightgrey', main = '')
par(mfrow = c(1, 1))
par(mfrow = c(1,2))
hist(x = mydata$wingspan, breaks = 2, main = '')
hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan),
by = 5),
freq = FALSE, col = 'lightgrey', main = '')
par(mfrow = c(1, 1))
par(mfrow = c(1,2))
hist(x = mydata$wingspan, breaks = 2, main = '')
hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan),
by = 2),
freq = FALSE, col = 'lightgrey', main = '')
par(mfrow = c(1, 1))
par(mfrow = c(1,2))
hist(x = mydata$wingspan, breaks = 2, main = '')
hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan),
by = 3),
freq = FALSE, col = 'lightgrey', main = '')
par(mfrow = c(1, 1))
min(mydata$wingspan)
max(mydata$wingspan)
189-12
177/3
177/6
my_h <- hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan), by = 3), plot = FALSE)
my_h
my_bp <- table(mydata$wingspan)
my_bp # note the difference to histograms ($counts)!
barplot(my_bp) # WHY is there a maximum of 3 counts in the histogram and 2 in the barplot?
my_h <- hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan), by = 3), plot = FALSE)
my_h
par(mfrow = c(1,2))
hist(x = mydata$wingspan, breaks = 2, main = '')
hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan),
by = 3),
freq = FALSE, col = 'lightgrey', main = '')
par(mfrow = c(1, 1))
my_bp <- table(mydata$wingspan)
my_bp # note the difference to histograms ($counts)!
barplot(my_bp) # WHY is there a maximum of 3 counts in the histogram and 2 in the barplot?
my_h <- hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan), by = 3), plot = FALSE)
my_h
my_bp <- table(mydata$wingspan)
my_bp # note the difference to histograms ($counts)!
barplot(my_bp)
coplot(formula = mydata$wingspan ~ mydata$wind_speed | mydata$insect, pch = 16)
#- mar = margin of figure in blue, oma = outer margin in green
#- mar/ oma go from below, left, above, right around the figure
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1), oma = c(1.5, 2, 1, 1))
plot(x = mydata$wingspan, col = color_for_insect_type, pch = 16, cex = 3)
boxplot(formula = mydata$wingspan ~ mydata$insect)
box(which = 'plot', col = 'red')
box(which = 'figure', col = 'blue', lty = 'dashed')
box(which = 'outer', col = 'green' , lwd = 5)
wsp_filename
#- Single Plot
pdfname <- paste0(output_wd, "/my_plot1.pdf") # store in  output folder
pdf(file = pdfname, width =  10, height = 10)
#with(data = mydata, expr = {coplot(wingspan ~ wind_speed | insect, pch=16)})
coplot(formula = wingspan ~ $wind_speed | insect, data= mydata, pch = 16)
#with(data = mydata, expr = {coplot(wingspan ~ wind_speed | insect, pch=16)})
coplot(formula = wingspan ~ wind_speed | insect, data= mydata, pch = 16)
dev.off()
#with(data = mydata, expr = {coplot(wingspan ~ wind_speed | insect, pch=16)})
coplot(formula = wingspan ~ wind_speed | insect, data= mydata, pch = 16)
#- Single Plot
pdfname <- paste0(output_wd, "/my_plot1.pdf") # store in  output folder
pdf(file = pdfname, width =  10, height = 10)
coplot(formula = wingspan ~ wind_speed | insect,
data = mydata, pch = 16)
dev.off()
#- Multiple Plot
jpeg(file =  paste0(output_wd,'/my_jpg.jpg')) #don't forget the /
par(mfrow = c(1, 2))
barplot(my_bp, col = rainbow(17), main = 'Barplot', xlab = 'wingspan', ylab = 'Count')
hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan),
by = 3),
freq = TRUE,
col = rainbow(6))
dev.off()
#- Single Plot
pdfname <- paste0(output_wd, "/my_plot1.pdf") # store in  output folder
pdf(file = pdfname, width =  5, height = 5)
coplot(formula = wingspan ~ wind_speed | insect,
data = mydata, pch = 16)
dev.off()
#- Multiple Plot
jpeg(file =  paste0(output_wd,'/my_jpg.jpg')) #don't forget the /
par(mfrow = c(1, 2))
barplot(my_bp, col = rainbow(17), main = 'Barplot', xlab = 'wingspan', ylab = 'Count')
hist(x = mydata$wingspan,
breaks = seq(min(mydata$wingspan),
max(mydata$wingspan),
by = 3),
freq = TRUE,
col = rainbow(6))
dev.off()
# install.packages('ggplot2') #run this if needed
library(ggplot2) # load the library; don't forget to install the package before
ggplot(data = mydata) # nothing happens but a grey panel appearing with the extent of the data
ggplot(data = mydata, mapping = aes(x = wind_speed, y = wingspan)) +
# everything related to the data should be in the aesthetics (aes)
geom_point()
ggplot(mydata, aes(wind_speed, wingspan)) + # data, mapping(x, y)
geom_point()
ggplot(mydata, aes(x = wind_speed, y = wingspan)) +
geom_point(
shape = 17,
size = 5,
col = 'gray40',
alpha = 0.5
)
myggplot1 <-
ggplot(mydata, aes(x = wind_speed, y = wingspan)) +
geom_point(
shape = 17,
size = 5,
col = "red",
alpha = 0.4 #makes shapes transparent
)
#to plot, call the object
myggplot1
myggplot1 +
labs(x = 'Wind Speed', y = 'Wing span [mm]') +
theme_dark()
theme_set(theme_light(base_size = 15))
myggplot1 +
facet_grid(. ~ insect) +
labs(x = 'Wind Speed', y = 'Wing span [mm]')
ggplot(mydata, aes(x = insect, y = wingspan, color = wind_speed)) +
geom_boxplot() +
geom_jitter(width = .1, alpha = .5,size=5) +
labs(x = "Insect taxon", y = "Wing span [mm]")
# mind where the color argument is set now: because different colours
# should be used for the violin plot and the jitter dots.
ggplot(mydata, aes(x = insect, y = wingspan)) +
geom_violin(fill = "gray80", size = 1, alpha = .5) +
geom_jitter(color = 'grey50',width = .1, alpha = .5, size=10) +
labs(x = "Insect taxon", y = "Wing span [mm]")
library(ggridges) # install package first if needed
ggplot(mydata, aes(x = wingspan, y = factor(insect))) +
geom_density_ridges(fill = "gray90") +
labs(x = "Wing span [mm]", y = "Taxon") +
theme_light()
library(ggridges) # install package first if needed
ggplot(mydata, aes(x = wingspan, y = factor(insect))) +
geom_density_ridges(fill = "gray90") +
labs(x = "Wing span [mm]", y = "Taxon") +
theme_light()
mydata
ggplot(mydata, aes(wingspan, wind_speed, fill = factor(insect))) +
geom_hdr(xlim = c(160, 240), ylim = c(30, 70)) +
geom_point(shape = 21)
library(ggdensity)
install.packages(ggdensity)
library(ggdensity) #
ggplot(mydata, aes(wingspan, wind_speed, fill = factor(insect))) +
geom_hdr(xlim = c(160, 240), ylim = c(30, 70)) +
geom_point(shape = 21)
install.packages("ggdensity")
# install.packages("ggdensity")
library(ggdensity) #
ggplot(mydata, aes(wingspan, wind_speed, fill = factor(insect))) +
geom_hdr(xlim = c(160, 240), ylim = c(30, 70)) +
geom_point(shape = 21)
# install.packages("ggdensity")
library(ggdensity) #
ggplot(mydata, aes(wingspan, wind_speed, fill = factor(insect))) +
geom_hdr(xlim = c(0, 250), ylim = c(45, 75)) +
geom_point(shape = 21)
# install.packages("ggdensity")
library(ggdensity) #
ggplot(mydata, aes(wingspan, wind_speed, fill = factor(insect))) +
geom_hdr(xlim = c(0, 250), ylim = c(45, 75)) +
geom_point(shape = 21, size=5)
# install.packages("ggdensity")
library(ggdensity) #
ggplot(mydata, aes(wingspan, wind_speed, fill = factor(insect))) +
geom_hdr(xlim = c(0, 250), ylim = c(45, 75)) +
geom_point(shape = 17, size=5)
# install.packages("ggdensity")
library(ggdensity) #
ggplot(mydata, aes(wingspan, wind_speed, fill = factor(insect))) +
geom_hdr(xlim = c(0, 250), ylim = c(45, 75)) +
geom_point(shape = 21, size=5)
# install.packages("ggdensity")
library(ggdensity) #
ggplot(mydata, aes(wingspan, wind_speed, fill = factor(insect))) +
geom_hdr(xlim = c(-50, 250), ylim = c(45, 75)) +
geom_point(shape = 21, size=5)
# install.packages("ggdensity")
library(ggdensity) #
ggplot(mydata, aes(wingspan, wind_speed, fill = factor(insect))) +
geom_hdr(xlim = c(-50, 250), ylim = c(40, 80)) +
geom_point(shape = 21, size=5)
# install first
library(rphylopic) # import the images of butterfly and dragonfly
library(patchwork) # for arranging the plots
#import phylopic (go to phylopic.org -> browse image -> click on image to get url)
drfly <- image_data("2894776f-a2cf-4475-b13d-6d8ea1607ea4", size = 128)[[1]]
bufly <- image_data("ef0f4ab5-9714-45dc-8760-57e9080f941e", size = 128)[[1]]
p1 <- ggplot(mydata, aes(x = wind_speed, y = wingspan)) +
geom_point() +
add_phylopic(img = drfly) +
labs(x = 'Wind Speed', y = 'Wing span [mm]', size = 15) +
theme_light()
###
p2 <- ggplot(mydata, aes(x = wind_speed, y =wingspan)) +
geom_point(color = rgb(0,0,0,0)) +
theme_light()
sub_drag <- subset(mydata, insect == 'dragonfly')
sub_butt <- subset(mydata, insect == 'butterfly')
for (i in 1:nrow(sub_drag)) {
p2 <- p2 + add_phylopic(drfly, 1,
sub_drag$wind_speed[i],
sub_drag$wingspan[i],10,'blue')}
for (j in 1:nrow(sub_butt)) {
p2 <- p2 + add_phylopic(bufly, 1,
sub_butt$wind_speed[j],
sub_butt$wingspan[j],10,'red')}
###
p3 <- ggplot(mydata, aes(x = wingspan, y = factor(insect))) +
geom_density_ridges(fill = "gray90") +
add_phylopic(img = bufly, alpha=1,
x = 50, y = 1.5, ysize = 20) +
add_phylopic(img = drfly, alpha = 1,
x = 80, y = 3, ysize = 25)  +
labs(x = "Wing span [mm]", y = "Taxon") +
theme_light()
### panel
p3 / (p1 + p2) + plot_annotation(tag_levels = "A", tag_suffix = ")")
wb_path <- "https://github.com/EcoDynIZW/d6_teaching_collection/blob/main/data/data_berlin/animal_data/data_wb_melden_en.csv"
wb <- read.csv(file = wb_path)
wb_path <- "https://raw.githubusercontent.com/EcoDynIZW/d6_teaching_collection/main/data/data_berlin/animal_data/data_wb_melden_en.csv"
wb <- read.csv(file = wb_path)
wb_path <- "https://raw.githubusercontent.com/EcoDynIZW/d6_teaching_collection/master/data/data_berlin/animal_data/data_wb_melden_en.csv"
wb <- read.csv(file = wb_path)
wb_path <- "https://raw.githubusercontent.com/EcoDynIZW/d6_teaching_collection/main/data/data_berlin/animal_data/data_wb_melden_en.csv?token=GHSAT0AAAAAAB4NMFTBZKADP245WD6BP6E6Y6B3ENQ"
wb <- read.csv(file = wb_path)
<
seq_data  <- seq(from = 1, to = 100, by = 1)     # create the x-axis, i.e. 100 time steps
norm_data <- rnorm(n = 100, mean = 0, sd = 1.96) # create normally distributed data (noise) around mean
#simulate trend = y-axis: intercept  + (slope * variable) +  error
trend_data <-  5  + (0.1 * seq_data) + norm_data #e.g. temperature
par(mfrow = c(1,1))
plot(x = seq_data, y = trend_data, pch = 15, col = 'grey', ylim = c(0,20))
lines(x = trend_data, pch = 17, col = 'blue')
abline(a = 5, b = 0.1, col = 'red', lwd=0.5)
seq_data  <- seq(from = 1, to = 100, by = 1)     # create the x-axis, i.e. 100 time steps
norm_data <- rnorm(n = 100, mean = 0, sd = 1.96) # create normally distributed data (noise) around mean
#simulate trend = y-axis: intercept  + (slope * variable) +  error
trend_data <-  5  + (0.1 * seq_data) + norm_data #e.g. temperature
par(mfrow = c(1,1))
plot(x = seq_data, y = trend_data, pch = 15, col = 'grey', ylim = c(0,20))
lines(x = trend_data, pch = 17, col = 'blue')
abline(v=0,lty = 'dotted',col = 'grey33')
abline(a = 5, b = 0.1, col = 'red', lwd=0.5)
my.lm <- lm(formula = trend_data ~ seq_data)
summary(object = my.lm)
par(mfrow=c(1,1))
plot(x = seq_data, y = trend_data, pch = 15, col = 'grey', ylim = c(0,20))
lines(x = trend_data, pch = 17, col = 'blue')
abline(a = 5, b = 0.1, col = 'red', lwd=0.5) # 'reality'
abline(my.lm, col = 'black') # fitted model
par(mfrow=c(1,1))
plot(x = seq_data, y = trend_data, pch = 15, col = 'grey', ylim = c(0,20))
lines(x = trend_data, pch = 17, col = 'blue', lty=2)
abline(a = 5, b = 0.1, col = 'red', lwd=0.5) # 'reality'
abline(my.lm, col = 'black') # fitted model
par(mfrow=c(1,1))
plot(x = seq_data, y = trend_data, pch = 15, col = 'grey', ylim = c(0,20))
lines(x = trend_data, pch = 17, col = 'blue', lty=3)
abline(a = 5, b = 0.1, col = 'red', lwd=0.5) # 'reality'
abline(my.lm, col = 'black') # fitted model
par(mfrow=c(1,1))
plot(x = seq_data, y = trend_data, pch = 15, col = 'grey', ylim = c(0,20))
lines(x = trend_data, pch = 17, col = 'blue', lty=3)
abline(a = 5, b = 0.1, col = 'red', lwd=2) # 'reality'
abline(my.lm, col = 'black') # fitted model
par(mfrow=c(1,1))
plot(x = seq_data, y = trend_data, pch = 15, col = 'grey', ylim = c(0,20))
lines(x = trend_data, pch = 17, col = 'blue', lty=3)
abline(a = 5, b = 0.1, col = 'red', lwd=2) # 'reality'
abline(my.lm, col = 'black',lwd=2) # fitted model
#- for repetitive operations
#- *i* is used as counter variable that is incremented
for(i in 1:4)
{ #begin
print(x = i)
if (i == 4) print (x = 'end of lop')
} # end
?'for'
#other useful control flow constructs are: *while*, *repeat*, *if*
f_logit <- function(var1) {-8.13 + (12.15 * var1)}   # linear model
f_prob  <- function(var2) {1/ (1 + exp(x = -var2))} # inverse logit
# perc_for = e.g. percentage of forest in a sampling plot/ area between 0 and 1 (=100%)
perc_for <- seq(from = 0, to = 1 ,by = 0.05)
the_logit  <- f_logit(var1 =  perc_for)
pres_prob  <- f_prob(var2 = the_logit) # here values of f_logit() are inserted into f_prob()
#pres_prob
plot(x = perc_for,y = pres_prob, type = 'l',
xlab = 'percentage of forest', ylab = 'prob of presence')
# define functions at the beginning of a script:
f_logit <- function(var1, intcpt, slp) {intcpt + (slp * var1)}
f_prob  <- function(var2) {1 / (1 + exp(x = -var2))} # = inverse logit
# simulate trend, i.e. the 'real' relationship:
seq_data  <- seq(from = 0, to = 1, by=0.01) # e.g. forest percentage
trend_data <- pbinom(q = 1:length(seq_data), size = length(seq_data), prob = 0.6)
plot(x = seq_data, y = trend_data, pch = 15)
# install.packages("purrr") # in case the package is not installed
set.seed(500) # ignore this line
trend_data_binom <- purrr::rbernoulli(length(seq_data),trend_data)
plot(x = seq_data, y = trend_data, pch = 15, col = 'grey')
points(x = seq_data, y = trend_data_binom, pch = '|')
#- example
base::plot(x = seq_data, y = trend_data, pch = 15, col = 'grey')
# install.packages("purrr") # in case the package is not installed
set.seed(500) # ignore this line
trend_data_binom <- purrr::rbernoulli(length(seq_data),trend_data)
plot(x = seq_data, y = trend_data, pch = 15, col = 'grey') # 'reality'
points(x = seq_data, y = trend_data_binom, pch = '|')      # our samples
#- example
base::plot(x = seq_data, y = trend_data, pch = 15, col = 'grey', add=TRUE)
#- example
base::points(x = seq_data, y = trend_data, pch = 15, col = 'grey', add=TRUE)
my.glm <- glm(formula = trend_data_binom ~ seq_data, family = 'binomial', na.action = na.omit)
summary(my.glm)
# store the output; access my.lm object via:
#str(my.lm)
myintercept <- my.glm$coefficients[[1]]
myslope     <- my.glm$coefficients[[2]]
# predict it for a certain range of variable values (seq_data)...
mylogit   <- f_logit(var1 = seq_data, intcpt = myintercept, slp = myslope)
pres_prob <- f_prob(var2 = mylogit)
# strictly linear relationship on the logit scale:
plot(x = seq_data, y = mylogit, type = 'l', lwd = 2)
# on the response / inverse logit scale:
plot(x = seq_data, y = pres_prob, type = 'l', lwd = 2)
plot(x = seq_data, y = pres_prob, type = 'l', lwd = 2) # fitted model
lines(x = seq_data, y = trend_data, pch = 15, col = 'grey') # 'true' distribution
points(x = seq_data, y = trend_data_binom, pch = '|') #field sampling based on 'true' distribution
myvalue <- 0.5
mylogit_s   <- f_logit(var1 = myvalue, intcpt = myintercept, slp = myslope)
(pres_prob_s <- f_prob(var2 = mylogit_s))
plot(x = seq_data, y = pres_prob, type = 'l', lwd = 2) # fitted model
abline(v = myvalue, lty = 2, lwd = 0.1)
abline(h = pres_prob_s, lty = 2, lwd = 0.1)
wsp_filename
getwd()
https://github.com/EcoDynIZW/d6_teaching_collection/raw/main/data/data_berlin/animal_data/data_wb_melden_en.csv
wb_path <- "https://github.com/EcoDynIZW/d6_teaching_collection/raw/main/data/data_berlin/animal_data/data_wb_melden_en.csv"
wb_file <- read.csv(wb_path)
