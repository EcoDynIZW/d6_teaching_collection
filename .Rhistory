?moths
# Chunk 4: octaves
moths.oc <- octav(moths)
moths.oc
plot(moths.oc)
# Chunk 5: RAD
# for the moths data
moths.rad <- rad(moths)
plot(moths.rad, ylab="Number of individuals")
# Chunk 6
# build the model
moths.ge <- fitsad(x=moths, sad="geom") # geometric distribution
moths.ls <- fitsad(x=moths, sad="ls") # log series distribution
moths.ln <- fitsad(x=moths, sad="lnorm") #log-normal distribution
# get rank abundance objects
moths.ge.rad <- radpred(moths.ge)
moths.ls.rad <- radpred(moths.ls)
moths.ln.rad <- radpred(moths.ln)
# Plot the curves
plot(moths.ln.rad)
plot(moths.ln.rad, xlab = "Rank", ylab = "Abundance", log = "y",
type = "l", col = "green", lty = 1, lwd = 6)
# We can superimpose the curve to the rank plot
plot(moths.rad)
lines(moths.ge.rad, col="red")
lines(moths.ls.rad, col="blue")
lines(moths.ln.rad, col="green")
legend("topright",c("Geometric", "Logseries", "lognormal"),lty=1, col=c("red", "blue", "green"))
## looking at the fits
logLik(moths.ge)
logLik(moths.ls)
logLik(moths.ln)
# Chunk 7: shannon_birds
birds1 <- data.frame(Species = c('BlueTit', 'Robin', 'Magpie',
'GreatTit'),
Abundance = rep(9, 4))
birds1
## now let us get the pi, ln(pi), N and S to calculate Shannon index
N <- sum(birds1$Abundance)
S <- nrow(birds1)
pi <- birds1$Abundance/N
lnpi <- log(pi)
H <- -sum(pi*lnpi)
H
# Chunk 8: shannon_vegan
# 1. transpose the data
birds1.transpose <- as.data.frame(t(birds1[, -1]))
colnames(birds1.transpose) <- birds1$Species
birds1.transpose
# Get diversity value
?diversity
H_vegan <- diversity(birds1.transpose, index = "shannon")
H_vegan
# Chunk 9: shannon_vs_hill
# We create a second community with no species in common with the first one
birds2 <- data.frame(Species = c('Sparrow', 'Dove', 'Crow'),
Abundance = c(4,5,20))
birds2
# the transpose matrix for the analysis
birds2.transpose <- as.data.frame(t(birds2[, -1]))
colnames(birds2.transpose) <- birds2$Species
birds2.transpose
# Both communities in the same table
# transpose data and get sums
birds.both <- merge(birds1, birds2, by = 'Species', all = T)
birds.both$Abundance.x[is.na(birds.both$Abundance.x)] <- 0
birds.both$Abundance.y[is.na(birds.both$Abundance.y)] <- 0
birds.both
birds.all <- rowSums(birds.both[,2:3])
birds.all
both.trans <- as.data.frame(t(birds.both[, -1]))
colnames(both.trans) <- birds.both$Species
rownames(both.trans) <- c("birds1", "birds2")
both.trans
all.trans <- colSums(both.trans)
# shannon diversity for each sample and for the sum
H1 <- diversity(both.trans, index = "shannon")
H2 <- diversity(all.trans, index = "shannon")
H1
H2
# Hill number order 1 (library iNEXT)
HN1.birds1 <- iNEXT(birds1$Abundance)
HN1.birds1$AsyEst
HN1.birds2 <- iNEXT(birds2$Abundance)
HN1.birds2$AsyEst
HN1.birdsboth <- iNEXT(birds.all)
HN1.birdsboth$AsyEst
# Chunk 10: load_inext_data
data(spider)
str(spider)
# Chunk 11: run_inext_q0
example1 <- iNEXT(spider, q = 0, datatype = "abundance")
example1$DataInfo
#Show a summary of the data with diversity estimates in rarefied and extrapolated samples
example1$iNextEst
# show asymptotic estimates
example1$AsyEst
# Chunk 12
# We define the number of samples size that we want to use for estimation
m <- c(1, 50, 100, 200, 400)
example2 <- iNEXT(spider, q = c(0,1,2), datatype = "abundance", size = m)
example2$iNextEst
# Chunk 13
ggiNEXT(example1, type=1) # Curve for sample size
# Chunk 14
ggiNEXT(example2, type=1, facet.var="site")
?iNEXT
?ggiNEXT
ggiNEXT(example2, type=1, facet.var="Assemblage")
library(knitr)
library(vegan)
library(iNEXT)
library(sads)
library(tidyverse)
library(terra)
library(here)
print('hello')
data(moths)
moths
?moths
moths.oc <- octav(moths)
moths.oc
?octav
plot(moths.oc)
# for the moths data
moths.rad <- rad(moths)
moths.rad
plot(moths.rad, ylab="Number of individuals")
?fitsad
# build the model
moths.ge <- fitsad(x=moths, sad="geom") # geometric distribution
moths.ls <- fitsad(x=moths, sad="ls") # log series distribution
moths.ln <- fitsad(x=moths, sad="lnorm") #log-normal distribution
# get rank abundance objects
moths.ge.rad <- radpred(moths.ge)
moths.ls.rad <- radpred(moths.ls)
moths.ln.rad <- radpred(moths.ln)
# Plot the curves
plot(moths.ln.rad)
plot(moths.ln.rad, xlab = "Rank", ylab = "Abundance", log = "y",
type = "l", col = "green", lty = 1, lwd = 6)
plot(moths.ln.rad, xlab = "Rank", ylab = "Abundance", log = "y",
type = "l", col = "darkred", lty = 1, lwd = 6)
plot(moths.ln.rad, xlab = "Rank", ylab = "Abundance", log = "y",
type = "l", col = "green", lty = 1, lwd = 6)
plot(moths.ln.rad, xlab = "Rank", ylab = "Abundance", log = "y",
type = "l", col = "green", lty = 2, lwd = 6)
plot(moths.ln.rad, xlab = "Rank", ylab = "Abundance", log = "y",
type = "l", col = "green", lty = 1, lwd = 2)
plot(moths.ln.rad, xlab = "Rank", ylab = "Abundance", log = "y",
type = "l", col = "green", lty = 1, lwd = 6)
# We can superimpose the curve to the rank plot
plot(moths.rad)
lines(moths.ge.rad, col="red")
lines(moths.ls.rad, col="blue")
lines(moths.ln.rad, col="green")
legend("topright",c("Geometric", "Logseries", "lognormal"),lty=1, col=c("red", "blue", "green"))
## looking at the fits
logLik(moths.ge)
logLik(moths.ls)
logLik(moths.ln)
birds1 <- data.frame(Species = c('BlueTit', 'Robin', 'Magpie',
'GreatTit'),
Abundance = rep(9, 4))
birds1
## now let us get the pi, ln(pi), N and S to calculate Shannon index
N <- sum(birds1$Abundance)
N
S <- nrow(birds1)
S
pi <- birds1$Abundance/N
pi
lnpi <- log(pi)
lnpi
H <- -sum(pi*lnpi)
H
birds1
# 1. transpose the data
birds1.transpose <- as.data.frame(t(birds1[, -1]))
birds1.transpose
colnames(birds1.transpose) <- birds1$Species
birds1.transpose
# Get diversity value
?diversity
H_vegan <- diversity(birds1.transpose, index = "shannon")
H_vegan
# We create a second community with no species in common with the first one
birds2 <- data.frame(Species = c('Sparrow', 'Dove', 'Crow'),
Abundance = c(4,5,20))
birds2
# the transpose matrix for the analysis
birds2.transpose <- as.data.frame(t(birds2[, -1]))
colnames(birds2.transpose) <- birds2$Species
birds2.transpose
birds.both <- merge(birds1, birds2, by = 'Species', all = T)
birds.both
birds.both$Abundance.x[is.na(birds.both$Abundance.x)] <- 0
birds.both$Abundance.y[is.na(birds.both$Abundance.y)] <- 0
birds.both
birds.all <- rowSums(birds.both[,2:3])
birds.all
both.trans <- as.data.frame(t(birds.both[, -1]))
colnames(both.trans) <- birds.both$Species
rownames(both.trans) <- c("birds1", "birds2")
both.trans
all.trans <- colSums(both.trans)
# shannon diversity for each sample and for the sum
H1 <- diversity(both.trans, index = "shannon")
H1
H2 <- diversity(all.trans, index = "shannon")
H2
birds1$Abundance
# Hill number order 1 (library iNEXT)
HN1.birds1 <- iNEXT(birds1$Abundance)
HN1.birds1
HN1.birds1$AsyEst
HN1.birds2 <- iNEXT(birds2$Abundance)
HN1.birds2$AsyEst
HN1.birdsboth <- iNEXT(birds.all)
HN1.birdsboth$AsyEst
data(spider)
str(spider)
?spider
example1 <- iNEXT(spider, q = 0, datatype = "abundance")
example1$DataInfo
#Show a summary of the data with diversity estimates in rarefied and extrapolated samples
example1$iNextEst
# show asymptotic estimates
example1$AsyEst
# We define the number of samples size that we want to use for estimation
m <- c(1, 50, 100, 200, 400)
example2 <- iNEXT(spider, q = c(0,1,2), datatype = "abundance", size = m)
example2$iNextEst
ggiNEXT(example1, type=1) # Curve for sample size
ggiNEXT(example2, type=1, facet.var="Assemblage")
ggiNEXT(example2, type=1, facet.var="Both")
ggiNEXT(example2, type=1, facet.var="Assemblage")
?ggiNEXT
ggiNEXT(example2, type=1, facet.var="Order.q")
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTcover2
habitat <- factor(c("Girdled", "Logged"))
# plot simple
mysub <- subset(estINEXTcover2, estINEXTcover2$Order.q == 0 )
mysub
plot(mysub$qD ~ habitat, border = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
# plot with confidence interval in ggplot
ggplot(mysub, aes(x = habitat, y = qD)) +
geom_point(colour = c("green4", "red"), size = 5) +
geom_errorbar(aes(ymin = qD.LCL, ymax = qD.UCL),
colour = c("green4", "red"),
width = 0.2) +
xlab("Habitats") +
ylab("Est. Species richness") +
theme_bw()
# plot with confidence interval in ggplot
ggplot(mysub, aes(x = habitat, y = qD)) +
geom_point(colour = c("green4", "red"), size = 5) +
geom_errorbar(aes(ymin = qD.LCL, ymax = qD.UCL-10),
colour = c("green4", "red"),
width = 0.2) +
xlab("Habitats") +
ylab("Est. Species richness") +
theme_bw()
# plot with confidence interval in ggplot
ggplot(mysub, aes(x = habitat, y = qD)) +
geom_point(colour = c("green4", "red"), size = 5) +
geom_errorbar(aes(ymin = qD.LCL, ymax = qD.UCL-5),
colour = c("green4", "red"),
width = 0.2) +
xlab("Habitats") +
ylab("Est. Species richness") +
theme_bw()
# plot with confidence interval in ggplot
ggplot(mysub, aes(x = habitat, y = qD)) +
geom_point(colour = c("green4", "red"), size = 5) +
geom_errorbar(aes(ymin = qD.LCL, ymax = qD.UCL),
colour = c("green4", "red"),
width = 0.2) +
xlab("Habitats") +
ylab("Est. Species richness") +
theme_bw()
# Bird data
bird_data <- read.csv(here("data","data_berlin","animal_data",
"Birds_Berlin_exercise_planillo2021.csv") )
head(bird_data)
bird_data
str(bird_data)
head(bird_data)
head(bird_data)
str(bird_data)
summary(bird_data)
# get the data in the proper format
bird_data <- column_to_rownames(bird_data, "site")
bird_data
bird_data <- t(bird_data)
bird_data
# run inext function
birds_inext <- iNEXT(bird_data, q = 0, datatype = "abundance") # q = 0 -> species richness
#Show a summary of the data
birds_inext$DataInfo
#Show a summary of the data with diversity estimates in rarefied and extrapolated samples
head(birds_inext$iNextEst)
# show asymptotic estimates
birds_inext$AsyEst
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="none") # not all plots sampled equally
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") # not all plots sampled equally
?ggiNEXT
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None", color.var = "None") # not all plots sampled equally
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None", color.var = "Order.q") # not all plots sampled equally
# get minimum number of individuals from data
min_abund <- min(birds_inext$DataInfo$n)
min_abund
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data, datatype = "abundance", base = "size", level = (min_abund*2),
conf = NULL)
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data, datatype = "abundance", base = "size", level = (min_abund*2),
conf = NULL)
?estimateD
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data, q = 0, datatype = "abundance", base = "size", level = (min_abund*2),
conf = NULL)
bird_data
head(bird_data)
str(bird_data)
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(as.data.frame(bird_data), q = 0, datatype = "abundance", base = "size", level = (min_abund*2),
conf = NULL)
as.data.frame(bird_data)
bird_data2 <- as.data.frame(bird_data)
bird_data2
str(bird_data2)
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data2, q = 0, datatype = "abundance", base = "size", level = (min_abund*2),
conf = NULL)
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data2, q = 0, datatype = "abundance", base = "size", level = (149*2),
conf = NULL)
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data2, q = 0, datatype = "abundance", base = "size", level = 200,
conf = NULL)
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data2, q = 0, datatype = "abundance", base = "size", level = 200,
conf = 0.95)
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data, q = 0, datatype = "abundance", base = "size", level = (min_abund * 2),
conf = 0.95)
birds_estINEXTsize
# extract species richness
birds_est_sprich <- as.data.frame(cbind(site = colnames(bird_data),
sp_rich = birds_estINEXTsize$Order.q))
birds_est_sprich
birds_est_sprich
# extract species richness
birds_est_sprich <- as.data.frame(cbind(site = colnames(bird_data),
sp_rich = birds_estINEXTsize$qD))
birds_est_sprich
env_cov <- read.csv(here("data","data_berlin","animal_data",
"birds_transects_allenvir_100m.csv") )
head(env_cov)
str(env_cov)
summary(env_cov)
colnames(env_cov)
birds_est_sprich
env_cov
# Put all data together: add environmental variables to birds data
#my_model_data <- left_join(birds_est_sprich, env_cov, by = "site")
my_model_data <- merge(birds_est_sprich,env_cov,by = "site")
my_model_data
my_model_data <- my_model_data[, c('site', 'sp_rich', 'tree_cover',
'impervious_surface', 'noise')]
str(my_model_data) # do you also have a chr for sp_rich?
my_model_data$sp_rich <- as.numeric(my_model_data$sp_rich)
str(my_model_data)
# explore relationships between variables
ggplot(my_model_data, aes(y = sp_rich, x = tree_cover)) +
geom_point() +
geom_smooth()
ggplot(my_model_data, aes(y = sp_rich, x = impervious_surface)) +
geom_point() +
geom_smooth()
ggplot(my_model_data, aes(y = sp_rich, x = noise)) +
geom_point() +
geom_smooth()
# build linear regression model
birds_model <- glm(sp_rich ~ tree_cover + impervious_surface + noise,
family = "gaussian",
data = my_model_data)
# View results of the model
summary(birds_model)
# view the regression line through impervious surface only:
ggplot(my_model_data, aes(y = sp_rich, x = impervious_surface)) +
geom_point(size=7,alpha=0.5) +
geom_smooth(method = "lm", se = TRUE, col='red') +
xlab('impervious surface')
plot(birds_model)
# view the regression line through impervious surface only:
ggplot(my_model_data, aes(y = sp_rich, x = impervious_surface)) +
geom_point(size=7,alpha=0.5) +
geom_smooth(method = "lm", se = TRUE, col='red') +
xlab('impervious surface')
##
## set working directory for maps, e.g. here geoTiffs ##
tree_raster   <- rast(here::here("data","data_berlin","geo_raster_current_gtif","tree_cover_density_2012_100m_3035.tif"))
imperv_raster <- rast(here::here("data","data_berlin","geo_raster_current_gtif","imperviousness_2012_100m_3035.tif"))
noise_raster  <- rast(here::here("data","data_berlin","geo_raster_current_gtif","noise_daynight_2017_100m_3035.tif"))
water_raster  <- rast(here::here("data","data_berlin","geo_raster_current_gtif","water_bodies_2010_100m_3035.tif"))
## this works
my_env_stack<- rast(list(tree_raster, imperv_raster, noise_raster))
my_env_stack
my_env_stack
my_env_stack
# the raster the same name as the variables in the model
names(my_env_stack) <- c("tree_cover", "impervious_surface", "noise")
my_env_stack
my_env_stack_2 <- my_env_stack/100 # correct values of the rasters
my_env_stack_2
sp_rich_pred <- terra::predict(object = my_env_stack_2,
model = birds_model)
sp_rich_pred
sp_rich_pred[sp_rich_pred < 0] <- 0 # Abundance cannot be < 0
# define colors
my_palette <- c("#440154FF", "#2D708EFF", "#56C667FF", "#DCE318FF", "#FDE725FF")
# plot map
plot(sp_rich_pred, col = my_palette, breaks = c(seq(5, 55, by = 10)))
plot(water_raster, col = "darkslategray1",  legend=FALSE, add = TRUE)
library(iNEXT)
library(here)
# Bird data
bird_data <- read.csv(here("data","data_berlin","animal_data",
"Birds_Berlin_exercise_planillo2021.csv") )
head(bird_data)
str(bird_data)
summary(bird_data)
bird_data
# get the data in the proper format
bird_data <- column_to_rownames(bird_data, "site")
bird_data <- t(bird_data)
# run inext function
birds_inext <- iNEXT(bird_data, q = 0, datatype = "abundance") # q = 0 -> species richness
#Show a summary of the data
birds_inext$DataInfo
library(tidyverse)
# Bird data
bird_data <- read.csv(here("data","data_berlin","animal_data",
"Birds_Berlin_exercise_planillo2021.csv") )
head(bird_data)
str(bird_data)
summary(bird_data)
bird_data
# get the data in the proper format
bird_data <- column_to_rownames(bird_data, "site")
bird_data <- t(bird_data)
# run inext function
birds_inext <- iNEXT(bird_data, q = 0, datatype = "abundance") # q = 0 -> species richness
#Show a summary of the data
birds_inext$DataInfo
library(scico)
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None", color.var = "Order.q") + # not all plots sampled equally
scale_color_manual(values =c("blue", "green"))
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") + # not all plots sampled equally
scale_color_manual(values =c("blue", "green"))
install.packages("scico")
install.packages("paletteer")
library(scico)
library(paletteer)
library(paletter)
library(paletteer)
paletteer::paletteer_c(scico::berlin)
?paletteer_c
paletteer::paletteer_c("scico::berlin", 29)
my_palette_inext <- paletteer::paletteer_c("scico::berlin", 29)
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") + # not all plots sampled equally
scale_color_manual(values =my_palette_inext)
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") + # not all plots sampled equally
scale_color_manual(values =my_palette_inext) +
scale_shape_manual(values = 1)
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") + # not all plots sampled equally
scale_color_manual(values = my_palette_inext) +
scale_shape_manual(values = 1)
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") + # not all plots sampled equally
scale_color_manual(palette = my_palette_inext) +
scale_shape_manual(values = 1)
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") + # not all plots sampled equally
scale_color_manual(values = my_palette_inext) +
scale_shape_manual(values = seq(1:29))
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") + # not all plots sampled equally
scale_color_manual(values = my_palette_inext) +
scale_fill_manual(values = my_palette_inext) +
scale_shape_manual(values = seq(1:29))
