# st_area(x = Borneo_shp) ## returns long vector
head(st_area(x = Borneo_shp))
Borneo_shp_moll <-  st_transform(Borneo_shp, c("+proj=moll +datum=WGS84"))
class(Borneo_shp_moll) #sf object, data.frame!
head(st_area(x = Borneo_shp_moll)) ## units?
ggplot(Borneo_shp_moll) +
geom_sf(color = "blue") +
theme_minimal(base_size = 15) ## set custom plot style
Mal_Borneo_shp <- subset(Borneo_shp_moll, Borneo_shp_moll$NAME_0 == 'Malaysia')
head(st_area(x = Mal_Borneo_shp) / 1000000) ## or / 1e6
## better: use set_units to change the units from m^2 to km^2
Mal_Borneo_shp$area <- units::set_units(x = st_area(x = Mal_Borneo_shp), value = km^2)
head(Mal_Borneo_shp$area)
st_area(x = Borneo_shp_moll[3, ]) ## for a single polygon
head(st_area(x = Borneo_shp_moll, byid = TRUE)) ## for all polygons
area_km2 <- set_units(x = st_area(x = Borneo_shp_moll, byid = TRUE), value = km^2)
Borneo_shp_moll = data.frame(Borneo_shp_moll, area_km2)
head(x = Borneo_shp_moll)
#gArea(Borneo_shp_moll, byid=TRUE) / 1e6 ## does not work, as Borneo_shp_moll is sf-object!
head(rgeos::gArea(Admin_sp, byid = TRUE) / 1e6) ## what does the warning message mean? -> check crs!
Admin_sp_moll <- spTransform(Admin_sp, c("+proj=moll +datum=WGS84"))
head(rgeos::gArea(Admin_sp_moll, byid = TRUE) / 1e6) ## now it works!
pt_shp <- st_read(dsn = paste0(recs_wd, "/FCsim.shp"))
pt_shp  ## crs is missing!
st_crs(pt_shp) <- 4326 ## set it with command st_crs()
pt_shp
recs_wd
pt_shp <- st_read(dsn = paste0(anim_wd, "/FCsim.shp"))
pt_file <- paste0(anim_wd, "/MyNewSpecies.csv")
df_recs <- read.table(file = pt_file, header = TRUE, sep = ',')
class(x = df_recs)
head(x = df_recs)
plot(x = as(Borneo_shp, "Spatial"), col = 'grey', border = 'white') ## polygon
points(x = df_recs$long, df_recs$lat, cex = 0.5, pch = 15) ## simple d.f.!
plot(x = as(pt_shp, "Spatial"), col = 'blue', add = TRUE)
recs_sf <- st_as_sf(x = data.frame(df_recs),
coords = c("long", "lat"),
crs = 4326,
sf_column_name = "geometry")
## retrieve the geometry (location) indices of PA_shp at
## the locations of sp_recs: which points are in PA_shp
nrow(recs_sf) ## 500
insidePA <- st_intersection(x = recs_sf, y = PA_shp)
nrow(insidePA) ## 11
# for a RASTER: extract mean ann. temp. from ras_bio_asc_01
# and add it to a.t.of the locations/ points
mean_t <- extract(x = ras_bio_asc_01, y = vect(recs_sf)) ## for {terra} we need to wrap the sf object into spatial vector with`vect()`
recs_sf$mean_t <- mean_t$bio_asc_01
mean(x = recs_sf$mean_t) # hist(sp_recs_sf$mean_t)
st_write(obj = insidePA,
dsn = output_wd,
layer = "inPA",
driver = "ESRI Shapefile",
delete_layer = TRUE)
library(rnaturalearth)
## store as sp object (SpatialPolygonsDataFrame)
world <- ne_countries() ## `returnclass = "sp"` by default
class(world)
## store as sf object (simple features)
world <- ne_countries(returnclass = "sf")
class(world)
sf::st_crs(world)[1]
names(world)
ggplot(world) + geom_sf(aes(fill = economy)) + theme_void()
glacier_small <- ne_download(type = "glaciated_areas", category = "physical",
scale = "small", returnclass = "sf")
glacier_large <- ne_download(type = "glaciated_areas", category = "physical",
scale = "large", returnclass = "sf")
ggplot(glacier_small) +
geom_sf(color = "grey40", fill = "grey40") +
theme_void()
ggplot(glacier_large) +
geom_sf(color = "grey40", fill = "grey40") +
theme_void()
relief <- ne_download(type = "MSR_50M", category = "raster",
scale = 50, returnclass = "sf")
plot(relief)
?ne_download
library(rnaturalearth)
## store as sp object (SpatialPolygonsDataFrame)
world <- ne_countries() ## `returnclass = "sp"` by default
class(world)
## store as sf object (simple features)
world <- ne_countries(returnclass = "sf")
class(world)
sf::st_crs(world)[1]
spdf_world <- ne_download( scale = 110, type = 'countries' )
if (require(sp)) {
plot(spdf_world)
plot(ne_download(type = 'populated_places'))
}
glacier_small <- ne_download(type = "glaciated_areas", category = "physical",
scale = "small", returnclass = "sf")
glacier_large <- ne_download(type = "glaciated_areas", category = "physical",
scale = "large", returnclass = "sf")
ggplot(glacier_small) +
geom_sf(color = "grey40", fill = "grey40") +
theme_void()
ggplot(glacier_large) +
geom_sf(color = "grey40", fill = "grey40") +
theme_void()
relief <- ne_download(type = "MSR_50M", category = "raster",
scale = 50, returnclass = "sf")
plot(relief)
library(osmdata)
## explore features + tags
head(available_features())
head(available_tags("craft"))
## building the query, e.g. beekeepers
beekeeper_query <-
## you can automatically retrieve a boudning box (pr specify one manually)
getbb("Berlin") %>%
## build an Overpass query
opq() %>%
## access particular feature
add_osm_feature("craft", "beekeeper")
## download data
sf_beekeepers <- osmdata_sf(beekeeper_query)
names(sf_beekeepers)
head(sf_beekeepers$osm_points)
beekeper_locations <- sf_beekeepers$osm_points
ggplot(beekeper_locations) +
geom_sf(data = d6berlin::sf_berlin) +
geom_sf(size = 2) +
theme_void()
library(elevatr)
## manually specify corners of the bounding box of the US
bbox_usa <- data.frame(x = c(-125.0011, -66.9326),
y = c(24.9493, 49.5904))
## turn into spatial, projected bounding box
sf_bbox_usa <- st_as_sf(bbox_usa, coords = c("x", "y"), crs = 4326)
elev_usa <- get_elev_raster(locations = sf_bbox_usa, z = 5)
plot(elev_usa)
myraster       <- terra::rast()
myshapefile    <- sf::st_read()
myxydataframe  <- sf::st_as_sf()
world
?units
?date
writeRaster(x = Bor_hs,
filename = paste0(output_wd,"/hillshade.asc"),
# or use here: here("output", "hillshade.asc")
overwrite = TRUE,
NAflag = NA)
## save the small cropped file
writeRaster(x = Bor_hs,
filename = paste0(output_wd,"/hillshade.asc"),
# or use here: here("output", "hillshade.asc")
overwrite = TRUE,
NAflag = -255)
## save the small aggregated file
writeRaster(x = ras_bio_asc_01_agg,
filename = paste0(output_wd,"/bor_agg.asc"),
# or use here: here("output", "bor_agg.asc")
overwrite = TRUE,
NAflag = -9999)
## save the small aggregated file
writeRaster(x = ras_bio_asc_01_agg,
filename = paste0(output_wd,"/bor_agg.asc"),
# or use here: here("output", "bor_agg.asc")
overwrite = TRUE,
NAflag = 1)
ras_bio_asc_01_agg
ras_bio_asc_01_agg@data@values
values(ras_bio_asc_01_agg)
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', fig.width = 6, fig.height = 6)
library(knitr)
library(vegan)
library(iNEXT)
library(sads)
library(tidyverse)
library(terra)
data(moths)
moths
?moths
moths.oc <- octav(moths)
moths.oc
plot(moths.oc)
# for the moths data
moths.rad <- rad(moths)
plot(moths.rad, ylab="Number of individuals")
# build the model
moths.ge <- fitsad(x=moths, sad="geom") # geometric distribution
moths.ls <- fitsad(x=moths, sad="ls") # log series distribution
moths.ln <- fitsad(x=moths, sad="lnorm") #log-normal distribution
# get rank abundance objects
moths.ge.rad <- radpred(moths.ge)
moths.ls.rad <- radpred(moths.ls)
moths.ln.rad <- radpred(moths.ln)
# Plot the curves
plot(moths.ln.rad)
plot(moths.ln.rad, xlab = "Rank", ylab = "Abundance", log = "y",
type = "l", col = "green", lty = 1, lwd = 6)
# We can superimpose the curve to the rank plot
plot(moths.rad)
lines(moths.ge.rad, col="red")
lines(moths.ls.rad, col="blue")
lines(moths.ln.rad, col="green")
legend("topright",c("Geometric", "Logseries", "lognormal"),lty=1, col=c("red", "blue", "green"))
## looking at the fits
logLik(moths.ge)
logLik(moths.ls)
logLik(moths.ln)
birds1 <- data.frame(Species = c('BlueTit', 'Robin', 'Magpie',
'GreatTit'),
Abundance = rep(9, 4))
birds1
## now let us get the pi, ln(pi), N and S to calculate Shannon index
N <- sum(birds1$Abundance)
S <- nrow(birds1)
pi <- birds1$Abundance/N
lnpi <- log(pi)
H <- -sum(pi*lnpi)
H
# 1. transpose the data
birds1.transpose <- as.data.frame(t(birds1[, -1]))
colnames(birds1.transpose) <- birds1$Species
birds1.transpose
# Get diversity value
?diversity
H_vegan <- diversity(birds1.transpose, index = "shannon")
H_vegan
# We create a second community with no species in common with the first one
birds2 <- data.frame(Species = c('Sparrow', 'Dove', 'Crow'),
Abundance = c(4,5,20))
birds2
# the transpose matrix for the analysis
birds2.transpose <- as.data.frame(t(birds2[, -1]))
colnames(birds2.transpose) <- birds2$Species
birds2.transpose
# Both communities in the same table
# transpose data and get sums
birds.both <- merge(birds1, birds2, by = 'Species', all = T)
birds.both$Abundance.x[is.na(birds.both$Abundance.x)] <- 0
birds.both$Abundance.y[is.na(birds.both$Abundance.y)] <- 0
birds.both
birds.all <- rowSums(birds.both[,2:3])
birds.all
both.trans <- as.data.frame(t(birds.both[, -1]))
colnames(both.trans) <- birds.both$Species
rownames(both.trans) <- c("birds1", "birds2")
both.trans
all.trans <- colSums(both.trans)
# shannon diversity for each sample and for the sum
H1 <- diversity(both.trans, index = "shannon")
H2 <- diversity(all.trans, index = "shannon")
H1
H2
# Hill number order 1 (library iNEXT)
HN1.birds1 <- iNEXT(birds1$Abundance)
HN1.birds1$AsyEst
HN1.birds2 <- iNEXT(birds2$Abundance)
HN1.birds2$AsyEst
HN1.birdsboth <- iNEXT(birds.all)
HN1.birdsboth$AsyEst
data(spider)
str(spider)
example1 <- iNEXT(spider, q = 0, datatype = "abundance")
example1$DataInfo
#Show a summary of the data with diversity estimates in rarefied and extrapolated samples
example1$iNextEst
# show asymptotic estimates
example1$AsyEst
# We define the number of samples size that we want to use for estimation
m <- c(1, 50, 100, 200, 400)
example2 <- iNEXT(spider, q = c(0,1,2), datatype = "abundance", size = m)
example2$iNextEst
ggiNEXT(example1, type=1) # Curve for sample size
ggiNEXT(example2, type=1, facet.var="site")
ggiNEXT(example2, type=1, facet.var="order")
?ggiNEXT
example2
ggiNEXT(example2, type=1, facet.var="Assemblage")
ggiNEXT(example2, type=1, facet.var="Both")
# adding grey=TRUE, we get a plot in black and white theme
ggiNEXT(example1, type=3) # Curve for sample size
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
# Bird data
bird_data <- read.csv(here("data","data_berlin","animal_data",
"Birds_Berlin_exercise_planillo2021.csv") )
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
library(here)
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
ggiNEXT(example1, type=3) # Curve for sample size
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
estINEXTsize
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = .252,
conf = NULL) # Remove the confidence intervals
?estimateD
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
inext_spiders <- iNEXT(spider, q = 0, datatype = "abundance")
info_spiders <- inext_spiders$DataInfo
max(info_spiders$n)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
max(info_spiders$SC)
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "coverage", level = .945,
conf = 0.95)
estINEXTsize
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252,
conf = NULL) # Remove the confidence intervals
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252,conf = NULL) # Remove the confidence intervals
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = 0.95) # Remove the confidence intervals
habitat <- factor(c("Girdled", "Logged"))
plot(estINEXTcover2$'q = 0' ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = NULL) # Remove the confidence intervals
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252 )#, conf = NULL) # Remove the confidence intervals
habitat <- factor(c("Girdled", "Logged"))
plot(estINEXTcover2$'q = 0' ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTsize <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTsize
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = NULL)
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.95)
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.0)
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = NULL)
#estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = NULL) #this does not work any more
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.0)# Remove the confidence intervals
habitat <- factor(c("Girdled", "Logged"))
plot(estINEXTcover2$'q = 0' ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTcover2
estINEXTcover2 <- estimateD(x = spider, datatype = "abundance", base = "size", level = 252, conf = NULL) #this does not work any more
estINEXTcover2 <- estimateD(spider, datatype = "abundance", base = "size", level = 252,
conf = 0.0)# Remove the confidence intervals
habitat <- factor(c("Girdled", "Logged"))
plot(estINEXTcover2$'Order.q = 0' ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTcover2$Order.q
plot(estINEXTcover2[estINEXTcover$Order.q == 0] ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
plot(estINEXTcover2[estINEXTcover2$Order.q == 0] ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
estINEXTcover2$Order.q == 0
mysub <- subset(estINEXTcover2,estINEXTcover2$Order.q == 0 )
mysub
plot(estINEXTcover2[estINEXTcover2$Order.q == 0] ~ Assemblage, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
plot(estINEXTcover2[estINEXTcover2$Order.q == 0] ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
mysub <- subset(estINEXTcover2,estINEXTcover2$Order.q == 0 )
plot(mysub ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
plot(mysub$SC ~ habitat, col = c("green4", "red"),
xlab = "Habitats", ylab = "Est. Species richness")
mysub
# Bird data
bird_data <- read.csv(here("data","data_berlin","animal_data",
"Birds_Berlin_exercise_planillo2021.csv") )
head(bird_data)
str(bird_data)
summary(bird_data)
bird_data
# get the data in the proper format
bird_data <- column_to_rownames(bird_data, "site")
bird_data <- t(bird_data)
# run inext function
birds_inext <- iNEXT(bird_data, q = 0, datatype = "abundance") # q = 0 -> species richness
#Show a summary of the data
birds_inext$DataInfo
#Show a summary of the data with diversity estimates in rarefied and extrapolated samples
head(birds_inext$iNextEst)
# show asymptotic estimates
birds_inext$AsyEst
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="none") # not all plots sampled equally
?ggiNEXT
# Species accumulation curves
ggiNEXT(birds_inext, type=1, facet.var="None") # not all plots sampled equally
# get minimum number of individuals from data
min_abund <- min(birds_inext$DataInfo$n)
# use 2x minimum number of individuals for rarefaction/extrapolation
birds_estINEXTsize <- estimateD(bird_data, datatype = "abundance", base = "size", level = (min_abund*2),
conf = NULL)
birds_estINEXTsize
knitr::opts_chunk$set(echo = TRUE, fig.align = 'center', fig.width = 6, fig.height = 6)
library(knitr)
library(vegan)
library(iNEXT)
library(sads)
library(tidyverse)
library(terra)
library(here)
envir   <- read.csv(here('data','data_berlin','animal_data','transects_allenvir_100m.csv'))
# Export dataframe of species abundance and environmental variables for each site
species <- read.csv(here('data','data_berlin','animal_data','birds_berlin_exercise_planillo2021.csv'))
envir   <- read.csv(here('data','data_berlin','animal_data','transects_allenvir_100m.csv'))
library(knitr)
library(vegan)
library(iNEXT)
library(BAT)
library(psych)
library(dplyr)
library(ggplot2)
library(terra)
library(here)
birds <- read.csv(here("data","data_berlin","animal_data",
"birds_berlin_exercise_planillo2021.csv") )
## look at the data
ncol(birds)
head(birds)
str(birds)
sites <- birds$site
birds.data <- birds[,-71] # remove site from data
rownames(birds.data) <- birds$site
str(birds.data)
envir <- read.csv(here("data","data_berlin","animal_data","birds_transects_allenvir_100m.csv"))
head(envir)
str(envir)
envir <- read.csv(here("data","data_berlin","animal_data","birds_transects_allenvir_100m.csv"))
package.list=c("here",
"marked",
"skimr",
"tidyverse",
"sf",
"tmap",
"devtools",
"rnaturalearthdata"
)
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
xaringan::inf_mr()
?crm
library("d6berlin")
#load environmental data on capturing
locations <-
read_csv(here(
"data",
"data_berlin",
"animal_data",
"starlings_capture_location_data.csv"
))
# Short overview
skim(locations)
#transform our locations into a spatial sf-object
loc_sf <- st_as_sf(locations, coords = c("Lon", "Lat"), crs = 4326)
#plot the locations
d6berlin::base_map_imp(globe = TRUE, resolution = 500)+
geom_sf(data=loc_sf%>%st_transform(crs=3035),aes(col=Habitat),size=5)+
guides(color = guide_legend(direction = "horizontal",
title.position = "top",
title.hjust = .5))
install("gtable")
install.packages("gtable")
#plot the locations
d6berlin::base_map_imp(globe = TRUE, resolution = 500)+
geom_sf(data=loc_sf%>%st_transform(crs=3035),aes(col=Habitat),size=5)+
guides(color = guide_legend(direction = "horizontal",
title.position = "top",
title.hjust = .5))
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
#plot the locations
d6berlin::base_map_imp(globe = TRUE, resolution = 500)+
geom_sf(data=loc_sf%>%st_transform(crs=3035),aes(col=Habitat),size=5)
install.packages("ffi_standalone_check_number_1.0.7")
