q()
del =10
q()
install.packages('httr')
install.packages("knitr")
install.packages("markdown")
install.packages("rmarkdown")
install.packages("htmltools")
library(httr) # to deal with proxy pb
library(knitr)
library(markdown)
?sqrt
install.packages("sp")
install.packages("dismo")
install.packages("raster")
install.packages("GISTools")
install.packages("rgdal")
install.packages("maptools")
install.packages("rgeos")
install.packages("rgl")
install.packages("rasterVis")
### The packages
```{r install package, message=FALSE}
library(sp)
library(dismo)
library(raster)
library(GISTools)
library(rgdal)
library(maptools)
library(rgeos)
library(rgl)
library(rasterVis)
#install.packages('ellipse')
#library(ellipse)
```
---
### The workspace
```{r workspace}
work_wd <- "c:/Users/kramer/Dropbox/_SDM_Kurs2014_TUD"
# relative to wd
maps_wd <- paste(work_wd,"/","BaseMaps",sep='')
recs_wd <- paste(work_wd,"/","BaseRecords",sep='')
maxent_wd <- paste(work_wd,"/","BaseModels",sep='')
output_wd <- paste(work_wd,"/","Output",sep='')
### TO DO FOlder mit future climates!!!!
```
---
### Sink function into workspace
```{r make function to read asciis to raster}
AsciiToRaster <- function(inascii, CRS_dd=TRUE)
{  require(raster)
temp <- read.asciigrid(inascii)
if(CRS_dd==TRUE){temp@proj4string <- CRS("+proj=longlat +datum=WGS84")}
else{message("wrong coordinate system")}
outraster <- raster(temp)
return(outraster)}
```
---
### Read in some rasters
```{r ras1}
temperature <- paste(maps_wd,'/bio_asc_1.asc',sep='')
ras1 <- AsciiToRaster(inascii = temperature)
dgm <- paste(maps_wd,'/bio_asc_24.asc',sep='')
ras24 <- AsciiToRaster(dgm)
# shorter - function within function
hillsh <- AsciiToRaster(paste(output_wd,'/hillshade.asc',sep=''))
```
---
### Borders of Borneo and protected areas (PA)
```{r load border}
Borneo_shp <- readOGR(dsn=maps_wd, layer="borneo_admin",
stringsAsFactors=FALSE)
PA_shp <-  readOGR(dsn=maps_wd, layer="Bor_PA",
stringsAsFactors=FALSE)
```
---
### Raster stack of environmental predictors
```{r list predictors}
files <- list.files(path= maps_wd, pattern='.asc$',
full.names=TRUE )
predictors <- stack(files)
plot(predictors)
```
---
### The spatial point data (species records)
```{r Spatial Point}
setwd(recs_wd)
pt_file <- 'spc21.txt'###################TO DO: dummy species an Flüssen
sp_recs <- read.table(pt_file, header=TRUE, sep='\t')
coordinates(sp_recs) <- ~long + lat
#  a more intuitive way to define the coordinate system:
projection(sp_recs)  <- CRS('+proj=longlat +datum=WGS84')
```
---
## TO DO add river lines in blue
### Start for SDM
```{r plot points II, fig.width=5, fig.height=5}
image(hillsh, col=grey(0:100/100))
plot(PA_shp,border='blue',add=T)
plot(sp_recs, pch= '+',cex=2,col='darkorange1',add=T)
text(112, -2, 'to be filled', cex=2, col= 'grey')
#plot river lines
```
---
# SDM preconditions
## Multicollinearity
### The pair plot
```{r pair plot}
pairs(predictors)
```
---
### Alternative: ellipse plot
```{r}
#  corr_predictors <- cor(getValues(predictors), use= 'complete.obs')
#  plotcorr(corr_predictors, col= ifelse(abs(corr_predictors)>0.75,
# 'khaki1','lemonchiffon3'))
```
---
## Data filtering
### Create small extent to visualize effect of data filtering
```{r Plot Sabah}
plot(ras24)
points(sp_recs)
extent(ras24)
sabah_e <- extent(117.2,117.45,5.4,5.5)
sabah_ras <- crop(ras24,sabah_e)
plot(sabah_ras)
points(sp_recs)
```
---
### Data filtering I - *gridSample*
```{r data filtering1}
# check the difference using aggregate and plot each
sub_sp_recs1 <- gridSample(sp_recs,ras1, n = 1)
sub_sp_recs1b <- gridSample(sp_recs,ras1, n = 1, chess='black')
sub_sp_recs1w <- gridSample(sp_recs,ras1, n = 1, chess='white')
sub_sp_recs5 <- gridSample(sp_recs, aggregate(ras1,5),
n = 1)
```
---
### Data filtering II - plot *gridSample* results
```{r data filtering2}
#add points to plot
plot(sabah_ras)
points(sub_sp_recs1, cex=2, col='red', pch='+')
points(sub_sp_recs5, cex=2, col='blue', pch='*')
# clean and plot the chessboard sampling
plot(sabah_ras)
points(sub_sp_recs1b, cex=2, col='red', pch='+')
points(sub_sp_recs1w, cex=2, col='blue', pch='*')
# dim(sub_sp_recs1b) # dim(sub_sp_recs1w)
# dim(sub_sp_recs5)
```
---
### Data filtering III - check class
```{r}
#what data class is it? Make it a spatial theme:
class(sub_sp_recs1b)
sub_sp_recs <- SpatialPointsDataFrame(sub_sp_recs1b,
data = data.frame(name = 1:nrow(sub_sp_recs1b)),
proj4string = CRS('+proj=longlat +datum=WGS84'))
class(sub_sp_recs)
# save:
# writeOGR(obj=sub_sp_recs,dsn=output_wd, layer='sub_sp_recs',
#  driver = 'ESRI Shapefile')
```
---
## Background manipulation [BM]
### *Rasterize* the shapefiles
```{r load aoi}
Mal_ras <- rasterize(Borneo_shp[Borneo_shp$NAME_0 %in% c("Brunei",
"Malaysia"),], y = ras24, field = 1, background = 0)
#is the same:
notInd_ras <- rasterize(Borneo_shp[Borneo_shp$NAME_0 != "Indonesia", ],
y = ras24, field = 1, background = 0)
Sab_ras <- rasterize(Borneo_shp[Borneo_shp$NAME_1 == 'Sabah',],
y = ras24,    field = 1, background = 0)
PA_ras <- rasterize(x = PA_shp, y = ras24, field = 1, background = 0)
```
---
### BM I: crosscheck with plot
```{r plot aoi}
plot(PA_ras, useRaster=F)
#plot(Mal_ras, useRaster=F)
plot(Borneo_shp, border="royalblue4", add=T)
points(sub_sp_recs, pch=21, col="black", bg="violetred1")
```
---
### BM II: Create bias file
- easy sampling in lowland < 250m asl
```{r bias file1}
bias <- (ras24 <= 250)
bias[values(bias == 0)] <- 0.1
plot(bias)     #, col = grey(0:100/100))
#### TO DO:save raster bias in output_wd
```
---
### BM III: Alternative bias file
- easy sampling in Sabah, in lowland, flat slope, Indonesia undersampled
```{r bias file2}
slope_deg <- terrain(x = ras24, opt = "slope",
unit = "degrees", neighbors = 8)
# TODO Achtung slope_deg hat anderen umriss - weniger pixel!!!
#bias_tmp <- (slope_deg <= 10) + (ras24 <= 1000) + PA_ras #+ Mal_ras
bias_tmp <- (slope_deg <= 10) + (ras24 <= 500) + Sab_ras + notInd_ras
#standardize bias file between 0 and 1
bias2 <- bias_tmp/max(values(bias_tmp),na.rm=T)
table(values(bias2))
bias2[values(bias2 == 0)] <- 0.1
plot(bias2, col = grey(1:5/5))
#### TO DO:save raster bias2 in output_wd
```
---
# SDM with R
## Nasty little installations
### Copy maxent.jar into R system folder
```{r,eval=FALSE}
library(dismo)
from_folder <- paste(maxent_wd,'/maxent.jar',sep='')
to_system_path <- system.file("java", package="dismo")
file.copy(from=from_folder, to= to_system_path, overwrite=T)
# set overwrite TRUE
jar <- paste(system.file(package="dismo"), "/java/maxent.jar", sep="")
file.exists(jar) #crosscheck: should evaluate to TRUE
### only works for 32bit version of R!!!!
install.packages('rJava')
library(rJava)
```
---
```{r}
```
---
### AB HIER WEITER
---
## create background data set from bias file (no option in R for MaxEnt specification)
#### *xyFromCell*, *sample*
- i.e. sample 10,000 random locations from background
```{r,eval=FALSE}
# TO DO - das Folgende ausklammern ### separate Folie ##aufheben!
length(which(!is.na(values(bias2))))
length(which(!is.na(values(predictors[[1]]))))
length(which(!is.na(values(slope_deg))))
length(which(!is.na(values(ras24))))
tmp <- which(is.na(values(bias2)) & !is.na(values(predictors[[1]])))
test2 <- predictors[[1]]
values(test2) <- 0
values(test2)[tmp] <- 1
plot(test2) ## Umriss Borneo sichtbar, da slope deg weniger ZEllen
# TO DO ausklammern bis hier
```
---
```{r}
# TO DO - 2 separate Folien pro bias file
# first, check which cells contain values (are NOT NA)
cell_no <- which(!is.na(values(predictors[[1]])))
cell_no2 <- which(!is.na(values(predictors[[1]])) &
!is.na(values(slope_deg)))
#head(cell_no) #length(cell_no)
# sample 10,000 from these BASED on the prob from bias file
# i.e. sample more cells from a bias value of 1 than from 0.1
n_bg_locs <- 100
#ersteres bias file
my_sample <- sample(cell_no, n_bg_locs , replace=T,
prob=values(bias)[which(!is.na(values(bias)))])
#funktioniert nict - sampled mehr von 0.5 als von 1 !!!!!!
my_sample2 <- sample(cell_no2, n_bg_locs , replace=T,
prob=values(bias2)[which(!is.na(values(bias2)))])
# now get coordinates from sample...
xy_sample <- xyFromCell( bias, cell=my_sample)
xy_sample2 <- xyFromCell( bias2, cell=my_sample2)
# ...and extract values to coordinates to check
# if sampling is according to bias file
bg <- extract(bias, xy_sample)
bg2 <- extract(bias2, xy_sample2)
table(bg)
table(bg2)
```
---
```{r}
# plot, and repeat the code from the sampling command
# what do you see?? (Always different locations sampled)
# bl is for color range plotting
bl <- length(unique(values(bias2)[which(!is.na(values(bias2)))]))
plot(bias,col= grey(1:bl/bl))
plot(SpatialPoints(xy_sample2), add = T, pch= 16, cex=1, col='orange')
# plot repetition
plot(SpatialPoints(xy_sample2), add = T, pch= 17, cex=1, col='red')
# TODO - wie könnte man das als Tabelle sepichern,
# damit bg an coordinaten hängt? -> cbind!
```
---
###TODO - das folgende irgendwo separat aufbewahren
```{r}
test <- xyFromCell( bias, cell=
sample(cell_no,
10000,
replace=T,
prob=values(bias)[which(!is.na(values(bias)) )])
)
plot(bias)
plot(SpatialPoints(test), add = T)
bg <- extract(bias, test)
table(bg)
```
---
)
library(rJava)
xm <- maxent(x=predictors,p=coordinates(sub_sp_recs),factors='bio_asc_42')
plot(xm)
px <- predict(predictors, xm, progress='text')
plot(px, col=rev(rainbow(n=1000,start=0,end=0.7)))
