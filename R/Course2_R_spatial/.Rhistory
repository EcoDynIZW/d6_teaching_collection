## when working with raster data
## do NOT load both packages terra and raster at the same time,
## as this creates problems with the namespace
library(terra) ## the "new" {raster} package
library(rgdal)
library(rgeos)
library(rasterVis)
## working with vector data
library(sf) ## the "new" {sp} package
library(stars)
## visualization
library(ggplot2)
library(tmap)
library(viridis) ## nice colour palettes
library(patchwork) ## to combine plots
library(units) ## handle measurement data
library(here) ## for easy directory management
#install.packages("Rcpp", repos="https://rcppcore.github.io/drat")
here::here()    # tip: use the namespace here:: before calling to function here()
here::dr_here() # because here() alone interferes with the package `purrr` if that is loaded
root_wd <- here::here() # the root folder is automatically set
root_wd
## today, we start with Borneo
#dbor_wd     <- paste0(root_wd, "/", "data/data_borneo") #- the old way
dbor_wd     <- here("data","data_borneo") #- note the nested folder structure
#  maps_wd   <- here("data","data_borneo","geo_raster_current_asc")  ##  same as:
maps_wd   <- paste0(dbor_wd, "/geo_raster_current_asc") #- mind difference paste0() and paste()
vecs_wd   <- paste0(dbor_wd, "/geo_vector")
anim_wd   <-  paste(dbor_wd, "/animal_data", sep = '')   #- paste() needs a separator sign
## read the ascii file as raster format
ras_bio_asc_01 <- rast(x = paste0(maps_wd, "/bio_asc_01.asc")) ## `raster()` with {raster}
## or use here:
ras_bio_asc_01 <- rast(x = here("data", "data_borneo","geo_raster_current_asc", "bio_asc_01.asc"))
Bor_mat <- ras_bio_asc_01  ## easy copying of whole maps; mat stands for mean annual temp
# collapse 20*20 cells into 1 using function 'mean':
ras_bio_asc_01_agg <- aggregate(x = ras_bio_asc_01, fact = 20, fun = mean)
ras_bio_asc_01_agg
values(ras_bio_asc_01_agg )
## save the small aggregated file
terra::writeRaster(x = ras_bio_asc_01_agg,
filename = paste0(output_wd,"/bor_agg.asc"),
# or use here: here("output", "bor_agg.asc")
overwrite = TRUE,
NAflag = -9999)
#output_wd <- paste0(dirname(root_wd), "/", "output") #- the old way
output_wd <- here("output")
if (!dir.exists(output_wd)) {dir.create(output_wd)} #- create only if directory does NOT! exist
writeRaster(x = ras_bio_asc_01_agg,
filename = paste0(output_wd,"/bor_agg.asc"),
# or use here: here("output", "bor_agg.asc")
overwrite = TRUE,
NAflag = -9999)
## save the small aggregated file
terra::writeRaster(x = ras_bio_asc_01_agg,
filename = paste0(output_wd,"/bor_agg.asc"),
# or use here: here("output", "bor_agg.asc")
overwrite = TRUE,
NAflag = -9999)
ext(x = ras_bio_asc_01) ## `extent()` with {raster}
clip_extent <- ext(117.2, 117.45, 5.4, 5.5)
ras_bio_asc_01_cr <- crop(x = ras_bio_asc_01, y = clip_extent)
plot(ras_bio_asc_01_cr, col = viridis::inferno(10))
## save the small cropped file
terra::writeRaster(x = ras_bio_asc_01_cr,
filename = paste0(output_wd,"/bor_crop.asc"),
# or use here: here("output", "bor_crop.asc")
overwrite = TRUE,
NAflag = -9999)
## save the small cropped file
terra::writeRaster(x = ras_bio_asc_01_cr,
filename = paste0(output_wd,"/bor_crop.asc"),
# or use here: here("output", "bor_crop.asc")
overwrite = TRUE,
NAflag = -9999)
terra::writeRaster(x = ras_bio_asc_01_agg,
filename = paste0(output_wd,"/ras_bio_asc_01_agg.asc"),
# or use here: here("output", "bor_crop.asc")
overwrite = TRUE,
NAflag = -9999)
?writeRaster
## save the small cropped file
terra::writeRaster(x = ras_bio_asc_01_cr,
filename = paste0(output_wd,"/bor_crop.asc"),
# or use here: here("output", "bor_crop.asc")
datatype = "INT1U",
overwrite = TRUE,
NAflag = -9999)
ras_bio_asc_01
values(ras_bio_asc_01)
values(ras_bio_asc_01_agg)
## save the small cropped file
terra::writeRaster(x = ras_bio_asc_01_cr,
filename = paste0(output_wd,"/bor_crop.asc"),
# or use here: here("output", "bor_crop.asc")
datatype = "INT4U",
overwrite = TRUE,
NAflag = -9999)
?rast
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE,
fig.width = 9, fig.height = 6, dev = "ragg_png")
#knitr::opts_knit$set(root.dir = 'C:/Users/kramer/PopDynIZW Dropbox/Steph Kramer/_GitHub')
pkgs <- c("terra", "stars", "rgdal", "rgeos", "rasterVis", "sf",
"ggplot2", "tmap", "viridis", "patchwork", "here", "units",
"devtools", "osmdata", "elevatr","tanaka")
## install packages that are not installed yet
## (not important to understand the following code, just run it)
unavailable <- setdiff(pkgs, rownames(installed.packages()))
install.packages(unavailable)
## install development version of rnaturalearth as currently the
## download doesn't work in the CRAN package version
devtools::install_github("ropensci/rnaturalearth")
## install rgeoboundaries from GitHub (not available on CRAN yet)
devtools::install_github("wmgeolab/rgeoboundaries")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE,
fig.width = 9, fig.height = 6, dev = "ragg_png")
#knitr::opts_knit$set(root.dir = 'C:/Users/kramer/PopDynIZW Dropbox/Steph Kramer/_GitHub')
knitr::include_graphics(here::here("img", "functions-terra-raster.png"))
pkgs <- c("terra", "stars", "rgdal", "rgeos", "rasterVis", "sf",
"ggplot2", "tmap", "viridis", "patchwork", "here", "units",
"devtools", "osmdata", "elevatr","tanaka")
## install packages that are not installed yet
## (not important to understand the following code, just run it)
unavailable <- setdiff(pkgs, rownames(installed.packages()))
install.packages(unavailable)
## install development version of rnaturalearth as currently the
## download doesn't work in the CRAN package version
devtools::install_github("ropensci/rnaturalearth")
## install rgeoboundaries from GitHub (not available on CRAN yet)
devtools::install_github("wmgeolab/rgeoboundaries")
pkgs <- c("terra", "stars", "rgdal", "rgeos", "rasterVis", "sf",
"ggplot2", "tmap", "viridis", "patchwork", "here", "units",
"devtools", "osmdata", "elevatr","tanaka")
## install packages that are not installed yet
## (not important to understand the following code, just run it)
unavailable <- setdiff(pkgs, rownames(installed.packages()))
install.packages(unavailable)
## install development version of rnaturalearth as currently the
## download doesn't work in the CRAN package version
devtools::install_github("ropensci/rnaturalearth")
## install rgeoboundaries from GitHub (not available on CRAN yet)
devtools::install_github("wmgeolab/rgeoboundaries")
## when working with raster data
## do NOT load both packages terra and raster at the same time,
## as this creates problems with the namespace
library(terra) ## the "new" {raster} package
library(rgdal)
library(rgeos)
library(rasterVis)
install.packages("rasterVis", dependencies = FALSE)
## when working with raster data
## do NOT load both packages terra and raster at the same time,
## as this creates problems with the namespace
library(terra) ## the "new" {raster} package
library(rgdal)
library(rgeos)
library(rasterVis)
install.packages("jpeg", dependencies = FALSE)
pkgs <- c("terra", "stars", "rgdal", "rgeos", "rasterVis", "sf",
"ggplot2", "tmap", "viridis", "patchwork", "here", "units",
"devtools", "osmdata", "elevatr","tanaka")
## install packages that are not installed yet
## (not important to understand the following code, just run it)
unavailable <- setdiff(pkgs, rownames(installed.packages()))
install.packages(unavailable)
## install development version of rnaturalearth as currently the
## download doesn't work in the CRAN package version
devtools::install_github("ropensci/rnaturalearth")
## install rgeoboundaries from GitHub (not available on CRAN yet)
devtools::install_github("wmgeolab/rgeoboundaries")
## when working with raster data
## do NOT load both packages terra and raster at the same time,
## as this creates problems with the namespace
library(terra) ## the "new" {raster} package
library(rgdal)
library(rgeos)
library(rasterVis)
## working with vector data
library(sf) ## the "new" {sp} package
library(stars)
## visualization
library(ggplot2)
library(tmap)
library(viridis) ## nice colour palettes
library(patchwork) ## to combine plots
library(units) ## handle measurement data
library(here) ## for easy directory management
#install.packages("Rcpp", repos="https://rcppcore.github.io/drat")
## when working with raster data
## do NOT load both packages terra and raster at the same time,
## as this creates problems with the namespace
library(terra) ## the "new" {raster} package
library(rgdal)
library(rgeos)
library(rasterVis)
## working with vector data
library(sf) ## the "new" {sp} package
library(stars)
## visualization
library(ggplot2)
library(tmap)
library(viridis) ## nice colour palettes
library(patchwork) ## to combine plots
library(units) ## handle measurement data
library(here) ## for easy directory management
#install.packages("Rcpp", repos="https://rcppcore.github.io/drat")
library(rnaturalearth)
## store as sp object (SpatialPolygonsDataFrame)
world <- ne_countries() ## `returnclass = "sp"` by default
class(world)
## store as sf object (simple features)
world <- ne_countries(returnclass = "sf")
class(world)
sf::st_crs(world)[1]
ggplot(world) +
geom_sf(aes(fill = economy)) +
coord_sf(crs = "+proj=eqearth") +
theme_void()
glacier_small <- ne_download(type = "glaciated_areas", category = "physical",
scale = "small", returnclass = "sf")
glacier_large <- ne_download(type = "glaciated_areas", category = "physical",
scale = "large", returnclass = "sf")
ggplot() +
geom_sf(data = world, color = "grey80", fill ="grey80") +
geom_sf(data = glacier_small, color = "grey40", fill = "grey40") +
coord_sf(crs = "+proj=eqearth") +
theme_void()
ggplot() +
geom_sf(data = world, color = "grey80", fill ="grey80") +
geom_sf(data = glacier_large, color = "grey40", fill = "grey40") +
coord_sf(crs = "+proj=eqearth") +
theme_void()
library(rgeoboundaries)
ggplot(gb_adm0()) +
geom_sf(color = "grey40", lwd = .2) +
coord_sf(crs = "+proj=eqearth") +
theme_void()
dach <- gb_adm1(c("germany", "switzerland", "austria"), type = "sscgs")
ggplot(dach) +
geom_sf(aes(fill = shapeGroup)) +
scale_fill_brewer(palette = "Set2") +
theme_void()
library(osmdata)
## explore features + tags
head(available_features())
head(available_tags("craft"))
## building the query, e.g. beekeepers
beekeeper_query <-
## you can automatically retrieve a boudning box (pr specify one manually)
getbb("Berlin") %>%
## build an Overpass query
opq() %>%
## access particular feature
add_osm_feature("craft", "beekeeper")
## download data
sf_beekeepers <- osmdata_sf(beekeeper_query)
names(sf_beekeepers)
head(sf_beekeepers$osm_points)
beekeper_locations <- sf_beekeepers$osm_points
d_berlin <- gb_adm2(c("berlin"), type = "sscgs")
gb_adm2
gb_adm2()
dach
d_berlin <- gb_adm2(c("DE-BE"), type = "sscgs")
dach <- gb_adm1(c("germany"), type = "sscgs")
dach
d_berlin <- gb_adm1(c("germany"), type = "sscgs")$shapeName == "Berlin"
d_berlin
ggplot(beekeper_locations) +
geom_sf(data = d_berlin) +
# geom_sf(data = d6berlin::sf_berlin) + ## alternative, but d6berlin needs to be loaded first
geom_sf(size = 2) +
theme_void()
d_berlin <- gb_adm1(c("germany"), type = "sscgs")   #$shapeName == "Berlin"
ggplot(beekeper_locations) +
geom_sf(data = d_berlin) +
# geom_sf(data = d6berlin::sf_berlin) + ## alternative, but d6berlin needs to be loaded first
geom_sf(size = 2) +
theme_void()
d_berlin <- gb_adm1(c("germany"), type = "sscgs")[6]   #$shapeName == "Berlin"
d_berlin
bg_deu <- gb_adm1(c("germany"), type = "sscgs")
bg_deu
gb_ber <- gb_adm2(c("DEU-ADM1-3_0_0-B6"), type = "sscgs")
bg_deu <- gb_adm1(c("germany"), type = "sscgs")[6,]
bg_deu
gb_deu <- gb_adm1(c("germany"), type = "sscgs")[6,] # the sixth element is Berlin
gb_ber <- gb_adm1(c("germany"), type = "sscgs")[6,] # the sixth element is Berlin
ggplot(beekeper_locations) +
geom_sf(data = gb_ber) +
# geom_sf(data = d6berlin::sf_berlin) + ## alternative, but d6berlin needs to be loaded first
geom_sf(size = 2) +
theme_void()
